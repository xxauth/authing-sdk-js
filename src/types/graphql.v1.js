"use strict";
exports.__esModule = true;
exports.WxQrCodeLogDocument = exports.WechatWorkCorpDocument = exports.ValidatePasswordDocument = exports.UsersInGroupDocument = exports.UsersByOidcAppDocument = exports.UsersDocument = exports.UserRoleListDocument = exports.UserPermissionListDocument = exports.UserPatchDocument = exports.UserOAuthCountDocument = exports.UserMetadataDocument = exports.UserGroupListDocument = exports.UserGroupDocument = exports.UserExistDocument = exports.UserClientsDocument = exports.UserClientTypesDocument = exports.UserClientListDocument = exports.UserAnalyticsDocument = exports.UserDocument = exports.TodayGeoDistributionDocument = exports.SupportedSamlFieldMappingsDocument = exports.StatisticDocument = exports.SearchUserBasicInfoByIdDocument = exports.SearchUserDocument = exports.SearchOrgNodesDocument = exports.SearchOrgNodeUserDocument = exports.SearchGroupByMetadataDocument = exports.SamlIdPFieldMappingsDocument = exports.RulesDocument = exports.RuleEnvDocument = exports.RuleByIdDocument = exports.RequestListDocument = exports.RegisterMethodTopListDocument = exports.RegisterEveryDayCountDocument = exports.RecentServiceCallDocument = exports.RbacRoleListDocument = exports.RbacRoleDocument = exports.RbacPermissionListDocument = exports.RbacPermissionDocument = exports.RbacGroupListDocument = exports.RbacGroupDocument = exports.QueryUserPoolCommonInfoDocument = exports.QuerySystemOAuthSettingDocument = exports.QuerySmsSendCountDocument = exports.QueryRoleByUserIdDocument = exports.QueryProviderInfoByDomainDocument = exports.QueryProviderInfoByAppIdDocument = exports.QueryPermissionListDocument = exports.QueryPasswordStrengthSettingsByUserPoolIdDocument = exports.QueryPasswordFaasEnabledDocument = exports.QueryOperationLogsDocument = exports.QueryMfaDocument = exports.QueryInvitationStateDocument = exports.QueryInvitationDocument = exports.QueryCollaboratorsByUserPoolIdDocument = exports.QueryCollaboratorPermissionsDocument = exports.QueryCollaborativeUserPoolByUserIdDocument = exports.QueryCollaborationByUserPoolIdAndUserIdDocument = exports.QueryClientDocument = exports.QueryAuthorizedUserPoolDocument = exports.QueryAuthAuditRecordsDocument = exports.QpsByTimeDocument = exports.QiNiuUploadTokenDocument = exports.ProviderListByAdConnectorDocument = exports.PreviewEmailTemplateDocument = exports.PlatformUserGrowthTrendDocument = exports.OrgsDocument = exports.OrgRootNodeDocument = exports.OrgNodeUserListDocument = exports.OrgChildrenNodesDocument = exports.OrgDocument = exports.NotBindOAuthListDocument = exports.LoginHotDotPicDataDocument = exports.LoginCountDocument = exports.IsUserInGroupDocument = exports.IsRootNodeOfOrgDocument = exports.IsLoginExpiredDocument = exports.IsDomainAvaliableDocument = exports.IsClientOfUserDocument = exports.IsClientBelongToUserDocument = exports.IsAppAuthorizedByUserDocument = exports.IsAdConnectorAliveDocument = exports.InterConnectionsDocument = exports.GroupMetadataDocument = exports.GetWebhookSettingOptionsDocument = exports.GetWebhookLogsDocument = exports.GetWebhookLogDetailDocument = exports.GetWebhookDetailDocument = exports.GetUserPoolSettingsDocument = exports.GetUserPoolByDomainDocument = exports.GetUserLoginAreaStatisticOfClientDocument = exports.GetOAuthedAppListDocument = exports.GetOAuthedAppInfoDocument = exports.GetCustomMfaDocument = exports.GetClientWhenSdkInitDocument = exports.GetAppSecretByClientIdDocument = exports.GetAllWebhooksDocument = exports.GetAccessTokenByAppSecretDocument = exports.FindClientsByIdArrayDocument = exports.EmailDomainTopNListDocument = exports.DecodeJwtTokenDocument = exports.ClientRolesDocument = exports.ClientDocument = exports.CheckPhoneCodeDocument = exports.CheckLoginStatusDocument = exports.CheckIsReservedDomainDocument = exports.CheckAdConnectorStatusDocument = exports.BindedOAuthListDocument = exports.AdConnectorListDocument = exports.AdConnectorByProviderDocument = exports.TestLdapUserDocument = exports.TestLdapServerDocument = exports.ReadUserPricingDocument = exports.ReadSystemPricingDocument = exports.ReadSamlspListDocument = exports.ReadOrdersDocument = exports.ReadOauthListDocument = exports.ReadEmailTemplatesBySystemDocument = exports.ReadEmailTemplatesByClientDocument = exports.ReadEmailTemplateByClientAndTypeDocument = exports.ReadEmailSentListByClientDocument = exports.ReadEmailSentListDocument = exports.ReadEmailProviderWithClientDocument = exports.ReadEmailProviderByClientAndNameDocument = exports.ReadEmailProviderDocument = exports.QuerySamlServiceProviderInfoByDomainDocument = exports.QuerySamlServiceProviderInfoByAppIdDocument = exports.QuerySamlIdentityProviderInfoByDomainDocument = exports.QuerySamlIdentityProviderInfoByAppIdDocument = exports.QueryOidcAppInfoByDomainDocument = exports.QueryOidcAppInfoByAppIdDocument = exports.QueryLdapServerListDocument = exports.QueryDefaultSamlIdentityProviderSettingsListDocument = exports.QueryClientIdByAppIdDocument = exports.QueryClientHasLdapConfigsDocument = exports.QueryAppInfoByDomainDocument = exports.QueryAppInfoByAppIdDocument = exports.PreviewEmailByTypeDocument = exports.GetUserAuthorizedAppsDocument = exports.GetSamlServiceProviderListDocument = exports.GetSamlServiceProviderInfoDocument = exports.GetSamlIdentityProviderListDocument = exports.GetSamlIdentityProviderInfoDocument = exports.GetOidcAppListDocument = exports.GetOidcAppInfoDocument = exports.DingTalkCorpDocument = exports.VerifyResetPasswordVerifyCodeDocument = exports.UpdateUserClientDocument = exports.UpdateUserDocument = exports.UpdateSuperAdminUserDocument = exports.UpdateRuleOrderDocument = exports.UpdateRuleDocument = exports.UpdateRoleDocument = exports.UpdateRbacRoleDocument = exports.UpdateRbacPermissionDocument = exports.UpdateRbacGroupDocument = exports.UpdatePhoneDocument = exports.UpdatePermissionsDocument = exports.UpdatePasswordStrengthSettingsByUserPoolIdDocument = exports.UpdateOrgDocument = exports.UpdateEmailDocument = exports.UpdateCollaboratorDocument = exports.UpdateClientWebhookDocument = exports.UpdateAdConnectorDocument = exports.UnbindOtherOAuthDocument = exports.UnbindEmailDocument = exports.StartWechatWorkCorpInitialSyncDocument = exports.StartDingTalkCorpInitialSyncDocument = exports.SignInDocument = exports.SetUserMetadataDocument = exports.SetSamlIdPFieldMappingDocument = exports.SetRuleEnvDocument = exports.SetInvitationStateDocument = exports.SendVerifyEmailDocument = exports.SendResetPasswordEmailDocument = exports.SendChangeEmailVerifyCodeDocument = exports.RevokeRbacRoleFromUserBatchDocument = exports.RevokeRbacRoleFromUserDocument = exports.ResetUserPoolFromWechatDocument = exports.RemoveUsersDocument = exports.RemoveUserMetadataDocument = exports.RemoveUserFromRbacGroupBatchDocument = exports.RemoveUserFromRbacGroupDocument = exports.RemoveUserFromGroupDocument = exports.RemoveUserClientsDocument = exports.RemoveSuperAdminUserDocument = exports.RemoveSamlIdpFieldMappingDocument = exports.RemoveRuleEnvDocument = exports.RemoveRoleFromRbacGroupBatchDocument = exports.RemoveRoleFromRbacGroupDocument = exports.RemovePermissionFromRbacRoleBatchDocument = exports.RemovePermissionFromRbacRoleDocument = exports.RemoveOrgNodeDocument = exports.RemoveGroupMetadataDocument = exports.RemoveFromInvitationDocument = exports.RemoveCustomMfaDocument = exports.RemoveCollaboratorDocument = exports.RemoveAdConnectorDocument = exports.RegisterDocument = exports.RefreshTokenDocument = exports.RefreshThirdPartyTokenDocument = exports.RefreshSignInTokenDocument = exports.RefreshAppSecretDocument = exports.RefreshAdConnectorSecretDocument = exports.RefreshAccessTokenDocument = exports.RecordRequestDocument = exports.RecordAuthAuditDocument = exports.PasswordLessForceLoginDocument = exports.OrderDocument = exports.OauthPasswordLoginDocument = exports.NewClientDocument = exports.LoginByAdDocument = exports.LoginDocument = exports.GenerateInvitationCodeDocument = exports.EncryptPasswordDocument = exports.EnablePasswordFaasDocument = exports.EnableAdConnectorForProviderDocument = exports.EnableAdConnectorDocument = exports.DisableAdConnectorForProviderDocument = exports.DisableAdConnectorDocument = exports.DeleteRuleDocument = exports.DeleteRbacRoleBatchDocument = exports.DeleteRbacRoleDocument = exports.DeleteRbacPermissionBatchDocument = exports.DeleteRbacPermissionDocument = exports.DeleteRbacGroupBatchDocument = exports.DeleteRbacGroupDocument = exports.DeleteOrgDocument = exports.DeleteClientWebhookDocument = exports.CreateUserWithoutAuthenticationDocument = exports.CreateUserDocument = exports.CreateRuleDocument = exports.CreateRoleDocument = exports.CreateRbacRoleDocument = exports.CreateRbacPermissionDocument = exports.CreateRbacGroupDocument = exports.CreateOrgDocument = exports.CreateInterConnectionDocument = exports.CreateCustomMfaDocument = exports.CreateAdConnectorDocument = exports.ChangePasswordDocument = exports.ChangeMfaDocument = exports.BindOtherOAuthDocument = exports.AssignUserToRoleDocument = exports.AssignRbacRoleToUserBatchDocument = exports.AssignRbacRoleToUserDocument = exports.AddWechatWorkCorpDocument = exports.AddUserToRbacGroupBatchDocument = exports.AddUserToRbacGroupDocument = exports.AddToInvitationDocument = exports.AddSuperAdminUserDocument = exports.AddRoleToRbacGroupBatchDocument = exports.AddRoleToRbacGroupDocument = exports.AddPermissionToRbacRoleBatchDocument = exports.AddPermissionToRbacRoleDocument = exports.AddPermissionDocument = exports.AddOrgNodeDocument = exports.AddGroupMetadataDocument = exports.AddDingTalkCorpDocument = exports.AddCollaboratorDocument = exports.AddClientWebhookDocument = exports.UseDefaultEmailProviderDocument = exports.UpdateSystemPricingDocument = exports.UpdateSamlServiceProviderDocument = exports.UpdateSamlIdentityProviderDocument = exports.UpdateOidcAppDocument = exports.UpdateOAuthProviderDocument = exports.UpdateOAuthListDocument = exports.UpdateLdapServerDocument = exports.UpdateEmailTemplateWithClientDocument = exports.UpdateEmailTemplateDocument = exports.UpdateEmailProviderDocument = exports.UpdateApplicationOAuthDocument = exports.SetApplicationOAuthEnableOrDisableDocument = exports.SendWebhookTestDocument = exports.SendEmailByTypeDocument = exports.SendEmailDocument = exports.SaveEmailProviderWithClientDocument = exports.RevokeUserAuthorizedAppDocument = exports.RemoveSamlServiceProviderDocument = exports.RemoveSamlIdentityProviderDocument = exports.RemoveOidcAppDocument = exports.RemoveOAuthProviderDocument = exports.RemoveOAuthListDocument = exports.RemoveLdapServerDocument = exports.RemoveEmailProviderDocument = exports.LoginByLdapDocument = exports.IncClientFlowNumberDocument = exports.EnableSamlServiceProviderDocument = exports.EnableSamlIdentityProviderDocument = exports.CreateSamlServiceProviderDocument = exports.CreateSamlIdentityProviderDocument = exports.CreateOidcAppDocument = exports.CreateOAuthProviderDocument = exports.CreateDefaultSamlIdentityProviderSettingsDocument = exports.ContinuePayDocument = exports.ClearAvatarSrcDocument = exports.AddSystemPricingDocument = exports.AddOAuthListDocument = exports.AddLdapServerDocument = exports.AddEmailProviderDocument = exports.RuleTypes = exports.SortByEnum = exports.ProviderType = exports.IamType = exports.OidcProviderDefaultLoginMethod = void 0;
var OidcProviderDefaultLoginMethod;
(function (OidcProviderDefaultLoginMethod) {
    OidcProviderDefaultLoginMethod["Phone"] = "PHONE";
    OidcProviderDefaultLoginMethod["Password"] = "PASSWORD";
    OidcProviderDefaultLoginMethod["Qrcode"] = "QRCODE";
})(OidcProviderDefaultLoginMethod = exports.OidcProviderDefaultLoginMethod || (exports.OidcProviderDefaultLoginMethod = {}));
var IamType;
(function (IamType) {
    IamType["Eiam"] = "EIAM";
    IamType["Ciam"] = "CIAM";
})(IamType = exports.IamType || (exports.IamType = {}));
var ProviderType;
(function (ProviderType) {
    ProviderType["Oidc"] = "OIDC";
    ProviderType["OAuth"] = "OAuth";
})(ProviderType = exports.ProviderType || (exports.ProviderType = {}));
var SortByEnum;
(function (SortByEnum) {
    SortByEnum["CreatedatDesc"] = "CREATEDAT_DESC";
    SortByEnum["CreatedatAsc"] = "CREATEDAT_ASC";
    SortByEnum["UpdatedatDesc"] = "UPDATEDAT_DESC";
    SortByEnum["UpdatedatAsc"] = "UPDATEDAT_ASC";
})(SortByEnum = exports.SortByEnum || (exports.SortByEnum = {}));
var RuleTypes;
(function (RuleTypes) {
    RuleTypes["PreRegister"] = "PRE_REGISTER";
    RuleTypes["PostRegister"] = "POST_REGISTER";
    RuleTypes["PostAuthentication"] = "POST_AUTHENTICATION";
    RuleTypes["PreOidctokenissued"] = "PRE_OIDCTOKENISSUED";
})(RuleTypes = exports.RuleTypes || (exports.RuleTypes = {}));
exports.AddEmailProviderDocument = "\n    mutation AddEmailProvider($options: EmailProviderListInput) {\n  AddEmailProvider(options: $options) {\n    _id\n    name\n    image\n    description\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    client\n    user\n    status\n    provider {\n      _id\n      name\n      image\n      description\n      client\n      user\n      status\n    }\n  }\n}\n    ";
exports.AddLdapServerDocument = "\n    mutation AddLDAPServer($name: String!, $clientId: String!, $userId: String!, $ldapLink: String!, $baseDN: String!, $searchStandard: String!, $username: String!, $password: String!, $emailPostfix: String, $description: String, $enabled: Boolean) {\n  AddLDAPServer(name: $name, clientId: $clientId, userId: $userId, ldapLink: $ldapLink, baseDN: $baseDN, searchStandard: $searchStandard, username: $username, password: $password, emailPostfix: $emailPostfix, description: $description, enabled: $enabled) {\n    _id\n    name\n    clientId\n    userId\n    ldapLink\n    baseDN\n    searchStandard\n    emailPostfix\n    username\n    password\n    description\n    enabled\n    isDeleted\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.AddOAuthListDocument = "\n    mutation AddOAuthList($options: OAuthListUpdateInput, $fields: [OAuthListFieldsFormUpdateInput]) {\n  AddOAuthList(options: $options, fields: $fields) {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.AddSystemPricingDocument = "\n    mutation AddSystemPricing($options: PricingFieldsInput) {\n  AddSystemPricing(options: $options) {\n    _id\n    type\n    startNumber\n    freeNumber\n    startPrice\n    maxNumber\n    d\n    features\n  }\n}\n    ";
exports.ClearAvatarSrcDocument = "\n    mutation ClearAvatarSrc($client: String, $oauth: String, $user: String) {\n  ClearAvatarSrc(client: $client, oauth: $oauth, user: $user) {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.ContinuePayDocument = "\n    mutation ContinuePay($order: String!) {\n  ContinuePay(order: $order) {\n    code\n    url\n    charge\n  }\n}\n    ";
exports.CreateDefaultSamlIdentityProviderSettingsDocument = "\n    mutation CreateDefaultSAMLIdentityProviderSettings($name: String!, $image: String, $description: String, $mappings: AssertionMapInputType) {\n  CreateDefaultSAMLIdentityProviderSettings(name: $name, image: $image, description: $description, mappings: $mappings) {\n    _id\n    name\n    image\n    description\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    isDeleted\n  }\n}\n    ";
exports.CreateOAuthProviderDocument = "\n    mutation CreateOAuthProvider($name: String!, $domain: String!, $redirectUris: [String]!, $grants: [String!]!, $clientId: String, $image: String, $description: String, $homepageURL: String, $casExpire: Int) {\n  CreateOAuthProvider(name: $name, domain: $domain, redirectUris: $redirectUris, grants: $grants, clientId: $clientId, image: $image, description: $description, homepageURL: $homepageURL, casExpire: $casExpire) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.CreateOidcAppDocument = "\n    mutation CreateOIDCApp($name: String!, $domain: String!, $redirect_uris: [String]!, $grant_types: [String!]!, $response_types: [String!]!, $clientId: String, $client_id: String, $token_endpoint_auth_method: String, $image: String, $isDefault: Boolean, $id_token_signed_response_alg: String, $id_token_encrypted_response_alg: String, $id_token_encrypted_response_enc: String, $userinfo_signed_response_alg: String, $userinfo_encrypted_response_alg: String, $userinfo_encrypted_response_enc: String, $request_object_signing_alg: String, $request_object_encryption_alg: String, $request_object_encryption_enc: String, $jwks_uri: String, $_jwks_uri: String, $jwks: String, $_jwks: String, $custom_jwks: String, $description: String, $homepageURL: String, $authorization_code_expire: String, $id_token_expire: String, $access_token_expire: String, $refresh_token_expire: String, $cas_expire: String, $customStyles: OIDCProviderCustomStylesInput, $isForTeamory: Boolean, $confirmAuthorization: Boolean) {\n  CreateOIDCApp(name: $name, domain: $domain, redirect_uris: $redirect_uris, grant_types: $grant_types, response_types: $response_types, clientId: $clientId, client_id: $client_id, token_endpoint_auth_method: $token_endpoint_auth_method, image: $image, isDefault: $isDefault, id_token_signed_response_alg: $id_token_signed_response_alg, id_token_encrypted_response_alg: $id_token_encrypted_response_alg, id_token_encrypted_response_enc: $id_token_encrypted_response_enc, userinfo_signed_response_alg: $userinfo_signed_response_alg, userinfo_encrypted_response_alg: $userinfo_encrypted_response_alg, userinfo_encrypted_response_enc: $userinfo_encrypted_response_enc, request_object_signing_alg: $request_object_signing_alg, request_object_encryption_alg: $request_object_encryption_alg, request_object_encryption_enc: $request_object_encryption_enc, jwks_uri: $jwks_uri, _jwks_uri: $_jwks_uri, jwks: $jwks, _jwks: $_jwks, custom_jwks: $custom_jwks, description: $description, homepageURL: $homepageURL, authorization_code_expire: $authorization_code_expire, id_token_expire: $id_token_expire, access_token_expire: $access_token_expire, refresh_token_expire: $refresh_token_expire, cas_expire: $cas_expire, customStyles: $customStyles, isForTeamory: $isForTeamory, confirmAuthorization: $confirmAuthorization) {\n    _id\n    name\n    domain\n    image\n    redirect_uris\n    client_id\n    client_secret\n    token_endpoint_auth_method\n    id_token_signed_response_alg\n    id_token_encrypted_response_alg\n    id_token_encrypted_response_enc\n    userinfo_signed_response_alg\n    userinfo_encrypted_response_alg\n    userinfo_encrypted_response_enc\n    request_object_signing_alg\n    request_object_encryption_alg\n    request_object_encryption_enc\n    jwks_uri\n    _jwks_uri\n    custom_jwks\n    jwks\n    _jwks\n    clientId\n    grant_types\n    response_types\n    description\n    homepageURL\n    isDeleted\n    isDefault\n    when\n    css\n    authorization_code_expire\n    id_token_expire\n    access_token_expire\n    refresh_token_expire\n    cas_expire\n    loginUrl\n    customStyles {\n      forceLogin\n      hideQRCode\n      hideUP\n      hideUsername\n      hideRegister\n      hidePhone\n      hideSocial\n      hideClose\n      hidePhonePassword\n      defaultLoginMethod\n    }\n    isForTeamory\n    confirmAuthorization\n  }\n}\n    ";
exports.CreateSamlIdentityProviderDocument = "\n    mutation CreateSAMLIdentityProvider($name: String!, $domain: String!, $clientId: String!, $image: String, $description: String, $SPMetadata: String, $IdPMetadata: String) {\n  CreateSAMLIdentityProvider(name: $name, domain: $domain, clientId: $clientId, image: $image, description: $description, SPMetadata: $SPMetadata, IdPMetadata: $IdPMetadata) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.CreateSamlServiceProviderDocument = "\n    mutation CreateSAMLServiceProvider($name: String!, $domain: String!, $clientId: String!, $redirectUrl: String!, $description: String, $SPMetadata: String, $IdPMetadata: String, $image: String, $mappings: AssertionMapInputType, $defaultIdPMapId: String) {\n  CreateSAMLServiceProvider(name: $name, domain: $domain, clientId: $clientId, redirectUrl: $redirectUrl, description: $description, SPMetadata: $SPMetadata, IdPMetadata: $IdPMetadata, image: $image, mappings: $mappings, defaultIdPMapId: $defaultIdPMapId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.EnableSamlIdentityProviderDocument = "\n    mutation EnableSAMLIdentityProvider($appId: String!, $clientId: String!, $enabled: Boolean) {\n  EnableSAMLIdentityProvider(appId: $appId, clientId: $clientId, enabled: $enabled) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.EnableSamlServiceProviderDocument = "\n    mutation EnableSAMLServiceProvider($appId: String!, $clientId: String!, $enabled: Boolean) {\n  EnableSAMLServiceProvider(appId: $appId, clientId: $clientId, enabled: $enabled) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.IncClientFlowNumberDocument = "\n    mutation IncClientFlowNumber($user: String, $userInvitied: String, $client: String, $number: Int) {\n  IncClientFlowNumber(user: $user, userInvitied: $userInvitied, client: $client, number: $number) {\n    code\n    url\n    charge\n  }\n}\n    ";
exports.LoginByLdapDocument = "\n    mutation LoginByLDAP($username: String!, $password: String!, $clientId: String!, $browser: String) {\n  LoginByLDAP(username: $username, password: $password, clientId: $clientId, browser: $browser) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.RemoveEmailProviderDocument = "\n    mutation RemoveEmailProvider($_ids: [String]!) {\n  RemoveEmailProvider(_ids: $_ids) {\n    _id\n    name\n    image\n    description\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    client\n    user\n    status\n    provider {\n      _id\n      name\n      image\n      description\n      client\n      user\n      status\n    }\n  }\n}\n    ";
exports.RemoveLdapServerDocument = "\n    mutation RemoveLDAPServer($ldapId: String!, $clientId: String!) {\n  RemoveLDAPServer(ldapId: $ldapId, clientId: $clientId) {\n    _id\n    name\n    clientId\n    userId\n    ldapLink\n    baseDN\n    searchStandard\n    emailPostfix\n    username\n    password\n    description\n    enabled\n    isDeleted\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.RemoveOAuthListDocument = "\n    mutation RemoveOAuthList($ids: [String]) {\n  RemoveOAuthList(ids: $ids)\n}\n    ";
exports.RemoveOAuthProviderDocument = "\n    mutation RemoveOAuthProvider($appId: String!, $clientId: String!) {\n  RemoveOAuthProvider(appId: $appId, clientId: $clientId) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.RemoveOidcAppDocument = "\n    mutation RemoveOIDCApp($appId: String!, $clientId: String!) {\n  RemoveOIDCApp(appId: $appId, clientId: $clientId) {\n    _id\n    name\n    domain\n    image\n    redirect_uris\n    client_id\n    client_secret\n    token_endpoint_auth_method\n    id_token_signed_response_alg\n    id_token_encrypted_response_alg\n    id_token_encrypted_response_enc\n    userinfo_signed_response_alg\n    userinfo_encrypted_response_alg\n    userinfo_encrypted_response_enc\n    request_object_signing_alg\n    request_object_encryption_alg\n    request_object_encryption_enc\n    jwks_uri\n    _jwks_uri\n    custom_jwks\n    jwks\n    _jwks\n    clientId\n    grant_types\n    response_types\n    description\n    homepageURL\n    isDeleted\n    isDefault\n    when\n    css\n    authorization_code_expire\n    id_token_expire\n    access_token_expire\n    refresh_token_expire\n    cas_expire\n    loginUrl\n    customStyles {\n      forceLogin\n      hideQRCode\n      hideUP\n      hideUsername\n      hideRegister\n      hidePhone\n      hideSocial\n      hideClose\n      hidePhonePassword\n      defaultLoginMethod\n    }\n    isForTeamory\n    confirmAuthorization\n  }\n}\n    ";
exports.RemoveSamlIdentityProviderDocument = "\n    mutation RemoveSAMLIdentityProvider($appId: String!, $clientId: String!) {\n  RemoveSAMLIdentityProvider(appId: $appId, clientId: $clientId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.RemoveSamlServiceProviderDocument = "\n    mutation RemoveSAMLServiceProvider($appId: String!, $clientId: String!) {\n  RemoveSAMLServiceProvider(appId: $appId, clientId: $clientId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.RevokeUserAuthorizedAppDocument = "\n    mutation RevokeUserAuthorizedApp($appId: String, $userPoolId: String, $userId: String) {\n  RevokeUserAuthorizedApp(appId: $appId, userPoolId: $userPoolId, userId: $userId) {\n    _id\n    appId\n    userId\n    scope\n    type\n    isRevoked\n    when\n  }\n}\n    ";
exports.SaveEmailProviderWithClientDocument = "\n    mutation SaveEmailProviderWithClient($options: EmailProviderWithClientAddInput) {\n  SaveEmailProviderWithClient(options: $options) {\n    _id\n    user\n    client\n    status\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    provider {\n      _id\n      name\n      image\n      description\n    }\n  }\n}\n    ";
exports.SendEmailDocument = "\n    mutation SendEmail($receivers: [String]!, $subject: String!, $client: String!, $user: String, $testAvailable: Boolean, $providerName: String, $content: String, $sender: String, $meta_data: String, $secret: String) {\n  SendEmail(receivers: $receivers, subject: $subject, client: $client, user: $user, testAvailable: $testAvailable, providerName: $providerName, content: $content, sender: $sender, meta_data: $meta_data, secret: $secret) {\n    _id\n    user\n    subject\n    content\n    sender\n    receivers\n    post\n    createdAt\n    rejected\n    isDeleted\n    client\n  }\n}\n    ";
exports.SendEmailByTypeDocument = "\n    mutation SendEmailByType($user: String!, $type: String!, $client: String!, $receivers: [String]!, $meta_data: String) {\n  SendEmailByType(user: $user, type: $type, client: $client, receivers: $receivers, meta_data: $meta_data) {\n    _id\n    user\n    subject\n    content\n    sender\n    receivers\n    post\n    createdAt\n    rejected\n    isDeleted\n    client\n  }\n}\n    ";
exports.SendWebhookTestDocument = "\n    mutation SendWebhookTest($id: String!) {\n  SendWebhookTest(id: $id)\n}\n    ";
exports.SetApplicationOAuthEnableOrDisableDocument = "\n    mutation SetApplicationOAuthEnableOrDisable($client: String, $oauth: String, $user: String, $enabled: Boolean) {\n  SetApplicationOAuthEnableOrDisable(client: $client, oauth: $oauth, user: $user, enabled: $enabled) {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.UpdateApplicationOAuthDocument = "\n    mutation UpdateApplicationOAuth($client: String, $oauth: String, $user: String, $alias: String, $fields: [OAuthListFieldsFormUpdateInput]) {\n  UpdateApplicationOAuth(client: $client, oauth: $oauth, user: $user, alias: $alias, fields: $fields) {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.UpdateEmailProviderDocument = "\n    mutation UpdateEmailProvider($options: EmailProviderListInput) {\n  UpdateEmailProvider(options: $options) {\n    _id\n    name\n    image\n    description\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    client\n    user\n    status\n    provider {\n      _id\n      name\n      image\n      description\n      client\n      user\n      status\n    }\n  }\n}\n    ";
exports.UpdateEmailTemplateDocument = "\n    mutation UpdateEmailTemplate($options: EmailTemplateInput!) {\n  UpdateEmailTemplate(options: $options) {\n    _id\n    type\n    sender\n    object\n    hasURL\n    URLExpireTime\n    status\n    redirectTo\n    content\n  }\n}\n    ";
exports.UpdateEmailTemplateWithClientDocument = "\n    mutation UpdateEmailTemplateWithClient($options: EmailTemplateWithClientInput!) {\n  UpdateEmailTemplateWithClient(options: $options) {\n    _id\n    user\n    client\n    status\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    provider {\n      _id\n      name\n      image\n      description\n    }\n  }\n}\n    ";
exports.UpdateLdapServerDocument = "\n    mutation UpdateLDAPServer($ldapId: String!, $name: String!, $clientId: String!, $userId: String!, $ldapLink: String!, $baseDN: String!, $username: String!, $searchStandard: String!, $password: String!, $emailPostfix: String, $description: String, $enabled: Boolean) {\n  UpdateLDAPServer(ldapId: $ldapId, name: $name, clientId: $clientId, userId: $userId, ldapLink: $ldapLink, baseDN: $baseDN, username: $username, searchStandard: $searchStandard, password: $password, emailPostfix: $emailPostfix, description: $description, enabled: $enabled) {\n    _id\n    name\n    clientId\n    userId\n    ldapLink\n    baseDN\n    searchStandard\n    emailPostfix\n    username\n    password\n    description\n    enabled\n    isDeleted\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.UpdateOAuthListDocument = "\n    mutation UpdateOAuthList($options: OAuthListUpdateInput, $fields: [OAuthListFieldsFormUpdateInput]) {\n  UpdateOAuthList(options: $options, fields: $fields) {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.UpdateOAuthProviderDocument = "\n    mutation UpdateOAuthProvider($appId: String!, $domain: String, $name: String, $image: String, $redirectUris: [String], $grants: [String], $description: String, $homepageURL: String, $css: String, $casExpire: Int) {\n  UpdateOAuthProvider(appId: $appId, domain: $domain, name: $name, image: $image, redirectUris: $redirectUris, grants: $grants, description: $description, homepageURL: $homepageURL, css: $css, casExpire: $casExpire) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.UpdateOidcAppDocument = "\n    mutation UpdateOIDCApp($appId: String!, $domain: String, $name: String, $image: String, $redirect_uris: [String], $token_endpoint_auth_method: String, $grant_types: [String], $response_types: [String], $id_token_signed_response_alg: String, $id_token_encrypted_response_alg: String, $id_token_encrypted_response_enc: String, $userinfo_signed_response_alg: String, $userinfo_encrypted_response_alg: String, $userinfo_encrypted_response_enc: String, $request_object_signing_alg: String, $request_object_encryption_alg: String, $request_object_encryption_enc: String, $jwks_uri: String, $_jwks_uri: String, $custom_jwks: String, $jwks: String, $_jwks: String, $description: String, $homepageURL: String, $css: String, $authorization_code_expire: String, $id_token_expire: String, $access_token_expire: String, $refresh_token_expire: String, $cas_expire: String, $customStyles: OIDCProviderCustomStylesInput, $isForTeamory: Boolean, $confirmAuthorization: Boolean) {\n  UpdateOIDCApp(appId: $appId, domain: $domain, name: $name, image: $image, redirect_uris: $redirect_uris, token_endpoint_auth_method: $token_endpoint_auth_method, grant_types: $grant_types, response_types: $response_types, id_token_signed_response_alg: $id_token_signed_response_alg, id_token_encrypted_response_alg: $id_token_encrypted_response_alg, id_token_encrypted_response_enc: $id_token_encrypted_response_enc, userinfo_signed_response_alg: $userinfo_signed_response_alg, userinfo_encrypted_response_alg: $userinfo_encrypted_response_alg, userinfo_encrypted_response_enc: $userinfo_encrypted_response_enc, request_object_signing_alg: $request_object_signing_alg, request_object_encryption_alg: $request_object_encryption_alg, request_object_encryption_enc: $request_object_encryption_enc, jwks_uri: $jwks_uri, _jwks_uri: $_jwks_uri, custom_jwks: $custom_jwks, jwks: $jwks, _jwks: $_jwks, description: $description, homepageURL: $homepageURL, css: $css, authorization_code_expire: $authorization_code_expire, id_token_expire: $id_token_expire, access_token_expire: $access_token_expire, refresh_token_expire: $refresh_token_expire, cas_expire: $cas_expire, customStyles: $customStyles, isForTeamory: $isForTeamory, confirmAuthorization: $confirmAuthorization) {\n    _id\n    name\n    domain\n    image\n    redirect_uris\n    client_id\n    client_secret\n    token_endpoint_auth_method\n    id_token_signed_response_alg\n    id_token_encrypted_response_alg\n    id_token_encrypted_response_enc\n    userinfo_signed_response_alg\n    userinfo_encrypted_response_alg\n    userinfo_encrypted_response_enc\n    request_object_signing_alg\n    request_object_encryption_alg\n    request_object_encryption_enc\n    jwks_uri\n    _jwks_uri\n    custom_jwks\n    jwks\n    _jwks\n    clientId\n    grant_types\n    response_types\n    description\n    homepageURL\n    isDeleted\n    isDefault\n    when\n    css\n    authorization_code_expire\n    id_token_expire\n    access_token_expire\n    refresh_token_expire\n    cas_expire\n    loginUrl\n    customStyles {\n      forceLogin\n      hideQRCode\n      hideUP\n      hideUsername\n      hideRegister\n      hidePhone\n      hideSocial\n      hideClose\n      hidePhonePassword\n      defaultLoginMethod\n    }\n    isForTeamory\n    confirmAuthorization\n  }\n}\n    ";
exports.UpdateSamlIdentityProviderDocument = "\n    mutation UpdateSAMLIdentityProvider($appId: String!, $clientId: String!, $domain: String, $image: String, $name: String, $description: String, $SPMetadata: String, $attributeNameFormat: String, $customAttributes: String, $emailDomainTransformation: String, $authnContextClassRef: String, $IdPMetadata: String, $assertionConsumerUrl: String, $bindings: [String], $nameIds: [String], $attributes: [String], $enableSignRes: Boolean, $resSignAlgorithm: String, $resAbstractAlgorithm: String, $resSignPublicKey: String, $resSignPrivateKey: String, $resSignPrivateKeyPass: String, $enableSignReq: Boolean, $reqSignPublicKey: String, $enableEncryptRes: Boolean, $resEncryptPublicKey: String, $css: String) {\n  UpdateSAMLIdentityProvider(appId: $appId, clientId: $clientId, domain: $domain, image: $image, name: $name, description: $description, SPMetadata: $SPMetadata, attributeNameFormat: $attributeNameFormat, customAttributes: $customAttributes, emailDomainTransformation: $emailDomainTransformation, authnContextClassRef: $authnContextClassRef, IdPMetadata: $IdPMetadata, assertionConsumerUrl: $assertionConsumerUrl, bindings: $bindings, nameIds: $nameIds, attributes: $attributes, enableSignRes: $enableSignRes, resSignAlgorithm: $resSignAlgorithm, resAbstractAlgorithm: $resAbstractAlgorithm, resSignPublicKey: $resSignPublicKey, resSignPrivateKey: $resSignPrivateKey, resSignPrivateKeyPass: $resSignPrivateKeyPass, enableSignReq: $enableSignReq, reqSignPublicKey: $reqSignPublicKey, enableEncryptRes: $enableEncryptRes, resEncryptPublicKey: $resEncryptPublicKey, css: $css) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.UpdateSamlServiceProviderDocument = "\n    mutation UpdateSAMLServiceProvider($appId: String!, $name: String!, $domain: String!, $clientId: String!, $redirectUrl: String!, $loginUrl: String!, $logoutUrl: String!, $nameId: String!, $IdPEntityID: String, $assertionConsumeService: [AssertionConsumeServiceInputType], $image: String, $mappings: AssertionMapInputType, $defaultIdPMapId: String, $description: String, $SPMetadata: String, $IdPMetadata: String, $enableSignRes: Boolean, $resSignPublicKey: String, $hasResEncrypted: Boolean, $resEncryptAlgorithm: String, $resAbstractAlgorithm: String, $resDecryptPrivateKey: String, $resDecryptPrivateKeyPass: String, $resEncryptPublicKey: String, $enableSignReq: Boolean, $reqSignAlgorithm: String, $reqAbstractAlgorithm: String, $reqSignPrivateKey: String, $reqSignPrivateKeyPass: String, $reqSignPublicKey: String) {\n  UpdateSAMLServiceProvider(appId: $appId, name: $name, domain: $domain, clientId: $clientId, redirectUrl: $redirectUrl, loginUrl: $loginUrl, logoutUrl: $logoutUrl, nameId: $nameId, IdPEntityID: $IdPEntityID, assertionConsumeService: $assertionConsumeService, image: $image, mappings: $mappings, defaultIdPMapId: $defaultIdPMapId, description: $description, SPMetadata: $SPMetadata, IdPMetadata: $IdPMetadata, enableSignRes: $enableSignRes, resSignPublicKey: $resSignPublicKey, hasResEncrypted: $hasResEncrypted, resEncryptAlgorithm: $resEncryptAlgorithm, resAbstractAlgorithm: $resAbstractAlgorithm, resDecryptPrivateKey: $resDecryptPrivateKey, resDecryptPrivateKeyPass: $resDecryptPrivateKeyPass, resEncryptPublicKey: $resEncryptPublicKey, enableSignReq: $enableSignReq, reqSignAlgorithm: $reqSignAlgorithm, reqAbstractAlgorithm: $reqAbstractAlgorithm, reqSignPrivateKey: $reqSignPrivateKey, reqSignPrivateKeyPass: $reqSignPrivateKeyPass, reqSignPublicKey: $reqSignPublicKey) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.UpdateSystemPricingDocument = "\n    mutation UpdateSystemPricing($options: PricingFieldsInput) {\n  UpdateSystemPricing(options: $options) {\n    _id\n    type\n    startNumber\n    freeNumber\n    startPrice\n    maxNumber\n    d\n    features\n  }\n}\n    ";
exports.UseDefaultEmailProviderDocument = "\n    mutation UseDefaultEmailProvider($user: String!, $client: String!) {\n  UseDefaultEmailProvider(user: $user, client: $client)\n}\n    ";
exports.AddClientWebhookDocument = "\n    mutation addClientWebhook($client: String!, $events: [String!]!, $url: String!, $contentType: String!, $enable: Boolean!, $secret: String, $isLastTimeSuccess: Boolean) {\n  addClientWebhook(client: $client, events: $events, url: $url, contentType: $contentType, enable: $enable, secret: $secret, isLastTimeSuccess: $isLastTimeSuccess) {\n    _id\n    client\n    events {\n      name\n      label\n      description\n    }\n    url\n    isLastTimeSuccess\n    contentType\n    secret\n    enable\n  }\n}\n    ";
exports.AddCollaboratorDocument = "\n    mutation addCollaborator($userPoolId: String!, $collaboratorUserId: String!, $permissionDescriptors: [PermissionDescriptorsInputType]!) {\n  addCollaborator(userPoolId: $userPoolId, collaboratorUserId: $collaboratorUserId, permissionDescriptors: $permissionDescriptors) {\n    _id\n    createdAt\n    owner {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    collaborator {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    userPool {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    permissionDescriptors {\n      permissionId\n      name\n      operationAllow\n    }\n  }\n}\n    ";
exports.AddDingTalkCorpDocument = "\n    mutation addDingTalkCorp($input: CreateDingTalkCorpInput!) {\n  addDingTalkCorp(input: $input) {\n    corpId\n    twoWaySynchronizationOn\n    createdAt\n    updatedAt\n    AESKey\n    token\n    orgId\n  }\n}\n    ";
exports.AddGroupMetadataDocument = "\n    mutation addGroupMetadata($groupId: String!, $key: String!, $value: String!) {\n  addGroupMetadata(groupId: $groupId, key: $key, value: $value) {\n    key\n    value\n  }\n}\n    ";
exports.AddOrgNodeDocument = "\n    mutation addOrgNode($input: AddOrgNodeInput!) {\n  addOrgNode(input: $input) {\n    _id\n    logo\n    nodes {\n      _id\n      name\n      description\n      createdAt\n      updatedAt\n      children\n      root\n      depth\n    }\n  }\n}\n    ";
exports.AddPermissionDocument = "\n    mutation addPermission($name: String!, $description: String) {\n  addPermission(name: $name, description: $description) {\n    _id\n    name\n    affect\n    description\n  }\n}\n    ";
exports.AddPermissionToRbacRoleDocument = "\n    mutation addPermissionToRBACRole($sortBy: SortByEnum, $page: Int, $count: Int, $input: AddPermissionToRBACRoleInput!) {\n  addPermissionToRBACRole(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AddPermissionToRbacRoleBatchDocument = "\n    mutation addPermissionToRBACRoleBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: AddPermissionToRBACRoleBatchInput) {\n  addPermissionToRBACRoleBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AddRoleToRbacGroupDocument = "\n    mutation addRoleToRBACGroup($sortBy: SortByEnum, $page: Int, $count: Int, $input: AddRoleToRBACGroupInput!) {\n  addRoleToRBACGroup(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AddRoleToRbacGroupBatchDocument = "\n    mutation addRoleToRBACGroupBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: AddRoleToRBACGroupBatchInput!) {\n  addRoleToRBACGroupBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AddSuperAdminUserDocument = "\n    mutation addSuperAdminUser($options: SuperAdminUpdateInput!) {\n  addSuperAdminUser(options: $options) {\n    email\n    username\n    _id\n    upgrade\n  }\n}\n    ";
exports.AddToInvitationDocument = "\n    mutation addToInvitation($client: String!, $phone: String) {\n  addToInvitation(client: $client, phone: $phone) {\n    client\n    phone\n    isDeleted\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.AddUserToRbacGroupDocument = "\n    mutation addUserToRBACGroup($sortBy: SortByEnum, $page: Int, $count: Int, $input: AddUserToRBACGroupInput!) {\n  addUserToRBACGroup(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AddUserToRbacGroupBatchDocument = "\n    mutation addUserToRBACGroupBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: AddUserToRBACGroupBatchInput!) {\n  addUserToRBACGroupBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AddWechatWorkCorpDocument = "\n    mutation addWechatWorkCorp($input: CreateWechatWorkCorpInput!) {\n  addWechatWorkCorp(input: $input) {\n    corpId\n    corpName\n    addressBookSyncHelperSecret\n    addressBookSyncHelperToken\n    addressBookSyncHelperEncodingAESKey\n    twoWaySynchronizationOn\n    createdAt\n    updatedAt\n    orgId\n  }\n}\n    ";
exports.AssignRbacRoleToUserDocument = "\n    mutation assignRBACRoleToUser($sortBy: SortByEnum, $page: Int, $count: Int, $input: AssignUserToRBACRoleInput!) {\n  assignRBACRoleToUser(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AssignRbacRoleToUserBatchDocument = "\n    mutation assignRBACRoleToUserBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: AssignUserToRBACRoleBatchInput!) {\n  assignRBACRoleToUserBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.AssignUserToRoleDocument = "\n    mutation assignUserToRole($client: String!, $user: String!, $group: String!) {\n  assignUserToRole(client: $client, user: $user, group: $group) {\n    list {\n      _id\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.BindOtherOAuthDocument = "\n    mutation bindOtherOAuth($type: String!, $unionid: String!, $userInfo: String!, $client: String, $user: String) {\n  bindOtherOAuth(type: $type, unionid: $unionid, userInfo: $userInfo, client: $client, user: $user) {\n    _id\n    user\n    client\n    type\n    unionid\n    userInfo\n    createdAt\n  }\n}\n    ";
exports.ChangeMfaDocument = "\n    mutation changeMFA($enable: Boolean!, $userId: String, $userPoolId: String, $_id: String, $refreshKey: Boolean) {\n  changeMFA(enable: $enable, userId: $userId, userPoolId: $userPoolId, _id: $_id, refreshKey: $refreshKey) {\n    _id\n    userId\n    userPoolId\n    enable\n    shareKey\n  }\n}\n    ";
exports.ChangePasswordDocument = "\n    mutation changePassword($password: String!, $email: String!, $client: String!, $verifyCode: String!) {\n  changePassword(password: $password, email: $email, client: $client, verifyCode: $verifyCode) {\n    _id\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    username\n    nickname\n    company\n    photo\n    browser\n    device\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLocation {\n      _id\n      when\n      where\n    }\n    userLoginHistory {\n      totalCount\n    }\n    systemApplicationType {\n      _id\n      name\n      descriptions\n      price\n    }\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    customData\n    metadata\n    salt\n  }\n}\n    ";
exports.CreateAdConnectorDocument = "\n    mutation createAdConnector($name: String!, $userPoolId: String!, $logo: String) {\n  createAdConnector(name: $name, userPoolId: $userPoolId, logo: $logo) {\n    _id\n    name\n    secret\n    salt\n    logo\n    enabled\n    userPoolId\n    status\n    createdAt\n  }\n}\n    ";
exports.CreateCustomMfaDocument = "\n    mutation createCustomMFA($userIdInMiniLogin: String!, $userPoolId: String!, $name: String!, $secret: String!, $remark: String) {\n  createCustomMFA(userIdInMiniLogin: $userIdInMiniLogin, userPoolId: $userPoolId, name: $name, secret: $secret, remark: $remark) {\n    _id\n    userIdInMiniLogin\n    userPoolId {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    remark\n    name\n    secret\n  }\n}\n    ";
exports.CreateInterConnectionDocument = "\n    mutation createInterConnection($sourceUserPoolId: String!, $sourceUserId: String!, $targetUserPoolId: String!, $targetUserId: String!, $maxAge: Int!) {\n  createInterConnection(sourceUserPoolId: $sourceUserPoolId, sourceUserId: $sourceUserId, targetUserPoolId: $targetUserPoolId, targetUserId: $targetUserId, maxAge: $maxAge) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.CreateOrgDocument = "\n    mutation createOrg($input: CreateOrgInput!) {\n  createOrg(input: $input) {\n    _id\n    logo\n    nodes {\n      _id\n      name\n      description\n      createdAt\n      updatedAt\n      children\n      root\n      depth\n    }\n  }\n}\n    ";
exports.CreateRbacGroupDocument = "\n    mutation createRBACGroup($sortBy: SortByEnum, $page: Int, $count: Int, $input: CreateRBACGroupInput!) {\n  createRBACGroup(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.CreateRbacPermissionDocument = "\n    mutation createRBACPermission($input: CreateRBACPermissionInput!) {\n  createRBACPermission(input: $input) {\n    _id\n    name\n    userPoolId\n    createdAt\n    updatedAt\n    description\n  }\n}\n    ";
exports.CreateRbacRoleDocument = "\n    mutation createRBACRole($sortBy: SortByEnum, $page: Int, $count: Int, $input: CreateRBACRoleInput!) {\n  createRBACRole(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.CreateRoleDocument = "\n    mutation createRole($client: String!, $name: String!, $descriptions: String) {\n  createRole(client: $client, name: $name, descriptions: $descriptions) {\n    _id\n    name\n    descriptions\n    client\n    permissions\n    createdAt\n  }\n}\n    ";
exports.CreateRuleDocument = "\n    mutation createRule($input: CreateRuleInput!) {\n  createRule(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    type\n    enabled\n    faasUrl\n    code\n    order\n    async\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.CreateUserDocument = "\n    mutation createUser($userInfo: UserRegisterInput!, $invitationCode: String, $keepPassword: Boolean) {\n  createUser(userInfo: $userInfo, invitationCode: $invitationCode, keepPassword: $keepPassword) {\n    _id\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    username\n    nickname\n    company\n    photo\n    browser\n    device\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLocation {\n      _id\n      when\n      where\n    }\n    userLoginHistory {\n      totalCount\n    }\n    systemApplicationType {\n      _id\n      name\n      descriptions\n      price\n    }\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    customData\n    metadata\n    salt\n  }\n}\n    ";
exports.CreateUserWithoutAuthenticationDocument = "\n    mutation createUserWithoutAuthentication($userPoolId: String!, $userInfo: UserRegisterInput!, $forceLogin: Boolean, $keepPassword: Boolean) {\n  createUserWithoutAuthentication(userPoolId: $userPoolId, userInfo: $userInfo, forceLogin: $forceLogin, keepPassword: $keepPassword) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.DeleteClientWebhookDocument = "\n    mutation deleteClientWebhook($id: String!) {\n  deleteClientWebhook(id: $id) {\n    _id\n    client\n    events {\n      name\n      label\n      description\n    }\n    url\n    isLastTimeSuccess\n    contentType\n    secret\n    enable\n  }\n}\n    ";
exports.DeleteOrgDocument = "\n    mutation deleteOrg($_id: String!) {\n  deleteOrg(_id: $_id) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRbacGroupDocument = "\n    mutation deleteRBACGroup($_id: String!) {\n  deleteRBACGroup(_id: $_id) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRbacGroupBatchDocument = "\n    mutation deleteRBACGroupBatch($idList: [String!]!) {\n  deleteRBACGroupBatch(idList: $idList) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRbacPermissionDocument = "\n    mutation deleteRBACPermission($_id: String!) {\n  deleteRBACPermission(_id: $_id) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRbacPermissionBatchDocument = "\n    mutation deleteRBACPermissionBatch($idList: [String!]!) {\n  deleteRBACPermissionBatch(idList: $idList) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRbacRoleDocument = "\n    mutation deleteRBACRole($_id: String!) {\n  deleteRBACRole(_id: $_id) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRbacRoleBatchDocument = "\n    mutation deleteRBACRoleBatch($idList: [String!]!) {\n  deleteRBACRoleBatch(idList: $idList) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DeleteRuleDocument = "\n    mutation deleteRule($_id: String!) {\n  deleteRule(_id: $_id) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DisableAdConnectorDocument = "\n    mutation disableAdConnector($_id: String!) {\n  disableAdConnector(_id: $_id)\n}\n    ";
exports.DisableAdConnectorForProviderDocument = "\n    mutation disableAdConnectorForProvider($providerId: String!, $adConnectorId: String!) {\n  disableAdConnectorForProvider(providerId: $providerId, adConnectorId: $adConnectorId)\n}\n    ";
exports.EnableAdConnectorDocument = "\n    mutation enableAdConnector($_id: String!) {\n  enableAdConnector(_id: $_id)\n}\n    ";
exports.EnableAdConnectorForProviderDocument = "\n    mutation enableAdConnectorForProvider($providerType: providerType!, $providerId: String!, $adConnectorId: String!) {\n  enableAdConnectorForProvider(providerType: $providerType, providerId: $providerId, adConnectorId: $adConnectorId)\n}\n    ";
exports.EnablePasswordFaasDocument = "\n    mutation enablePasswordFaas($client: String!, $enable: Boolean!) {\n  enablePasswordFaas(client: $client, enable: $enable) {\n    encryptUrl\n    decryptUrl\n    user\n    client\n    logs\n    enable\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.EncryptPasswordDocument = "\n    mutation encryptPassword($password: String!, $client: String!, $isTest: Boolean) {\n  encryptPassword(password: $password, client: $client, isTest: $isTest) {\n    _id\n    encryptUrl\n    decryptUrl\n    client\n    user\n    logs\n    enable\n    createdAt\n    updatedAt\n    password\n  }\n}\n    ";
exports.GenerateInvitationCodeDocument = "\n    mutation generateInvitationCode($user: String!, $client: String!) {\n  generateInvitationCode(user: $user, client: $client) {\n    _id\n    user\n    client\n    code\n    createdAt\n  }\n}\n    ";
exports.LoginDocument = "\n    mutation login($registerInClient: String!, $phone: String, $phoneCode: Int, $unionid: String, $openid: String, $username: String, $email: String, $password: String, $lastIP: String, $verifyCode: String, $MFACode: String, $fromRegister: Boolean, $device: String, $browser: String, $params: String) {\n  login(registerInClient: $registerInClient, phone: $phone, phoneCode: $phoneCode, unionid: $unionid, openid: $openid, username: $username, email: $email, password: $password, lastIP: $lastIP, verifyCode: $verifyCode, MFACode: $MFACode, fromRegister: $fromRegister, device: $device, browser: $browser, params: $params) {\n    _id\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    username\n    nickname\n    company\n    photo\n    browser\n    device\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLocation {\n      _id\n      when\n      where\n    }\n    userLoginHistory {\n      totalCount\n    }\n    systemApplicationType {\n      _id\n      name\n      descriptions\n      price\n    }\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    customData\n    metadata\n    salt\n  }\n}\n    ";
exports.LoginByAdDocument = "\n    mutation loginByAd($adConnectorId: String!, $username: String!, $password: String!) {\n  loginByAd(adConnectorId: $adConnectorId, username: $username, password: $password) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.NewClientDocument = "\n    mutation newClient($client: NewUserClientInput!) {\n  newClient(client: $client) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.OauthPasswordLoginDocument = "\n    mutation oauthPasswordLogin($registerInClient: String!, $phone: String, $unionid: String, $email: String, $password: String, $lastIP: String, $verifyCode: String) {\n  oauthPasswordLogin(registerInClient: $registerInClient, phone: $phone, unionid: $unionid, email: $email, password: $password, lastIP: $lastIP, verifyCode: $verifyCode) {\n    _id\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    username\n    nickname\n    company\n    photo\n    browser\n    device\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLocation {\n      _id\n      when\n      where\n    }\n    userLoginHistory {\n      totalCount\n    }\n    systemApplicationType {\n      _id\n      name\n      descriptions\n      price\n    }\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    customData\n    metadata\n    salt\n  }\n}\n    ";
exports.OrderDocument = "\n    mutation order($options: OrderAddInput!) {\n  order(options: $options) {\n    code\n    url\n    charge\n  }\n}\n    ";
exports.PasswordLessForceLoginDocument = "\n    mutation passwordLessForceLogin($userPoolId: String!, $userId: String!) {\n  passwordLessForceLogin(userPoolId: $userPoolId, userId: $userId) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.RecordAuthAuditDocument = "\n    mutation recordAuthAudit($userPoolId: String!, $appType: String!, $appId: String!, $userId: String!, $event: String!, $message: String) {\n  recordAuthAudit(userPoolId: $userPoolId, appType: $appType, appId: $appId, userId: $userId, event: $event, message: $message) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.RecordRequestDocument = "\n    mutation recordRequest($when: String!, $ip: String!, $responseTime: Int!, $size: Int!, $from: String) {\n  recordRequest(when: $when, ip: $ip, responseTime: $responseTime, size: $size, from: $from) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.RefreshAccessTokenDocument = "\n    mutation refreshAccessToken($userPoolId: String!, $accessToken: String!) {\n  refreshAccessToken(userPoolId: $userPoolId, accessToken: $accessToken) {\n    accessToken\n  }\n}\n    ";
exports.RefreshAdConnectorSecretDocument = "\n    mutation refreshAdConnectorSecret($_id: String) {\n  refreshAdConnectorSecret(_id: $_id) {\n    _id\n    name\n    secret\n    salt\n    logo\n    enabled\n    userPoolId\n    status\n    createdAt\n  }\n}\n    ";
exports.RefreshAppSecretDocument = "\n    mutation refreshAppSecret($client: UpdateUserClientInput!) {\n  refreshAppSecret(client: $client) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.RefreshSignInTokenDocument = "\n    mutation refreshSignInToken($refreshToken: String!, $oidcAppId: String, $userPoolId: String) {\n  refreshSignInToken(refreshToken: $refreshToken, oidcAppId: $oidcAppId, userPoolId: $userPoolId) {\n    access_token\n    id_token\n    refresh_token\n    scope\n    expires_in\n  }\n}\n    ";
exports.RefreshThirdPartyTokenDocument = "\n    mutation refreshThirdPartyToken($userPoolId: String!, $userId: String!) {\n  refreshThirdPartyToken(userPoolId: $userPoolId, userId: $userId) {\n    refreshSuccess\n    message\n    provider\n    refreshToken\n    accessToken\n    updatedAt\n  }\n}\n    ";
exports.RefreshTokenDocument = "\n    mutation refreshToken($client: String!, $user: String!) {\n  refreshToken(client: $client, user: $user) {\n    token\n    iat\n    exp\n  }\n}\n    ";
exports.RegisterDocument = "\n    mutation register($userInfo: UserRegisterInput!, $invitationCode: String, $keepPassword: Boolean) {\n  register(userInfo: $userInfo, invitationCode: $invitationCode, keepPassword: $keepPassword) {\n    _id\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    username\n    nickname\n    company\n    photo\n    browser\n    device\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLocation {\n      _id\n      when\n      where\n    }\n    userLoginHistory {\n      totalCount\n    }\n    systemApplicationType {\n      _id\n      name\n      descriptions\n      price\n    }\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    customData\n    metadata\n    salt\n  }\n}\n    ";
exports.RemoveAdConnectorDocument = "\n    mutation removeAdConnector($_id: String!) {\n  removeAdConnector(_id: $_id)\n}\n    ";
exports.RemoveCollaboratorDocument = "\n    mutation removeCollaborator($collaborationId: String!) {\n  removeCollaborator(collaborationId: $collaborationId) {\n    _id\n    createdAt\n    owner {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    collaborator {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    userPool {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    permissionDescriptors {\n      permissionId\n      name\n      operationAllow\n    }\n  }\n}\n    ";
exports.RemoveCustomMfaDocument = "\n    mutation removeCustomMFA($_id: String!) {\n  removeCustomMFA(_id: $_id) {\n    _id\n    userIdInMiniLogin\n    userPoolId {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    remark\n    name\n    secret\n  }\n}\n    ";
exports.RemoveFromInvitationDocument = "\n    mutation removeFromInvitation($client: String!, $phone: String) {\n  removeFromInvitation(client: $client, phone: $phone) {\n    client\n    phone\n    isDeleted\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.RemoveGroupMetadataDocument = "\n    mutation removeGroupMetadata($groupId: String!, $key: String!) {\n  removeGroupMetadata(groupId: $groupId, key: $key) {\n    key\n    value\n  }\n}\n    ";
exports.RemoveOrgNodeDocument = "\n    mutation removeOrgNode($input: RemoveOrgNodeInput!) {\n  removeOrgNode(input: $input) {\n    _id\n    logo\n    nodes {\n      _id\n      name\n      description\n      createdAt\n      updatedAt\n      children\n      root\n      depth\n    }\n  }\n}\n    ";
exports.RemovePermissionFromRbacRoleDocument = "\n    mutation removePermissionFromRBACRole($sortBy: SortByEnum, $page: Int, $count: Int, $input: RemovePermissionFromRBACRoleInput!) {\n  removePermissionFromRBACRole(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RemovePermissionFromRbacRoleBatchDocument = "\n    mutation removePermissionFromRBACRoleBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: RemovePermissionFromRBACRoleBatchInput!) {\n  removePermissionFromRBACRoleBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RemoveRoleFromRbacGroupDocument = "\n    mutation removeRoleFromRBACGroup($sortBy: SortByEnum, $page: Int, $count: Int, $input: RemoveRoleFromRBACGroupInput!) {\n  removeRoleFromRBACGroup(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RemoveRoleFromRbacGroupBatchDocument = "\n    mutation removeRoleFromRBACGroupBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: RemoveRoleFromRBACGroupBatchInput!) {\n  removeRoleFromRBACGroupBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RemoveRuleEnvDocument = "\n    mutation removeRuleEnv($input: RemoveRuleEnvInput!) {\n  removeRuleEnv(input: $input) {\n    totalCount\n    list {\n      key\n      value\n    }\n  }\n}\n    ";
exports.RemoveSamlIdpFieldMappingDocument = "\n    mutation removeSAMLIdpFieldMapping($sourceExpression: String!, $idpId: String!) {\n  removeSAMLIdpFieldMapping(sourceExpression: $sourceExpression, idpId: $idpId) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.RemoveSuperAdminUserDocument = "\n    mutation removeSuperAdminUser($_id: String!, $username: String!) {\n  removeSuperAdminUser(_id: $_id, username: $username) {\n    email\n    username\n    _id\n    upgrade\n  }\n}\n    ";
exports.RemoveUserClientsDocument = "\n    mutation removeUserClients($ids: [String]) {\n  removeUserClients(ids: $ids) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.RemoveUserFromGroupDocument = "\n    mutation removeUserFromGroup($client: String!, $user: String!, $group: String!) {\n  removeUserFromGroup(client: $client, user: $user, group: $group) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    client {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    createdAt\n  }\n}\n    ";
exports.RemoveUserFromRbacGroupDocument = "\n    mutation removeUserFromRBACGroup($sortBy: SortByEnum, $page: Int, $count: Int, $input: RemoveUserFromRBACGroupInput!) {\n  removeUserFromRBACGroup(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RemoveUserFromRbacGroupBatchDocument = "\n    mutation removeUserFromRBACGroupBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: RemoveUserFromRBACGroupBatchInput!) {\n  removeUserFromRBACGroupBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RemoveUserMetadataDocument = "\n    mutation removeUserMetadata($input: RemoveUserMetadataInput!) {\n  removeUserMetadata(input: $input) {\n    totalCount\n    list {\n      key\n      value\n    }\n  }\n}\n    ";
exports.RemoveUsersDocument = "\n    mutation removeUsers($ids: [String], $registerInClient: String, $operator: String) {\n  removeUsers(ids: $ids, registerInClient: $registerInClient, operator: $operator) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.ResetUserPoolFromWechatDocument = "\n    mutation resetUserPoolFromWechat($client: String!, $registerMethod: String!, $limit: Int!) {\n  resetUserPoolFromWechat(client: $client, registerMethod: $registerMethod, limit: $limit) {\n    list {\n      _id\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      username\n      nickname\n      company\n      photo\n      browser\n      device\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      customData\n      metadata\n      salt\n    }\n    totalCount\n  }\n}\n    ";
exports.RevokeRbacRoleFromUserDocument = "\n    mutation revokeRBACRoleFromUser($sortBy: SortByEnum, $page: Int, $count: Int, $input: RevokeRBACRoleFromUserInput!) {\n  revokeRBACRoleFromUser(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RevokeRbacRoleFromUserBatchDocument = "\n    mutation revokeRBACRoleFromUserBatch($sortBy: SortByEnum, $page: Int, $count: Int, $input: RevokeRBACRoleFromUserBatchInput!) {\n  revokeRBACRoleFromUserBatch(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.SendChangeEmailVerifyCodeDocument = "\n    mutation sendChangeEmailVerifyCode($userPoolId: String!, $email: String!) {\n  sendChangeEmailVerifyCode(userPoolId: $userPoolId, email: $email) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.SendResetPasswordEmailDocument = "\n    mutation sendResetPasswordEmail($client: String!, $email: String!) {\n  sendResetPasswordEmail(client: $client, email: $email) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.SendVerifyEmailDocument = "\n    mutation sendVerifyEmail($email: String!, $client: String!, $token: String) {\n  sendVerifyEmail(email: $email, client: $client, token: $token) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.SetInvitationStateDocument = "\n    mutation setInvitationState($client: String!, $enablePhone: Boolean) {\n  setInvitationState(client: $client, enablePhone: $enablePhone) {\n    client\n    enablePhone\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.SetRuleEnvDocument = "\n    mutation setRuleEnv($input: SetRuleEnvInput!) {\n  setRuleEnv(input: $input) {\n    totalCount\n    list {\n      key\n      value\n    }\n  }\n}\n    ";
exports.SetSamlIdPFieldMappingDocument = "\n    mutation setSAMLIdPFieldMapping($idpId: String!, $sourceExpression: String!, $description: String, $type: String!, $targetField: String!) {\n  setSAMLIdPFieldMapping(idpId: $idpId, sourceExpression: $sourceExpression, description: $description, type: $type, targetField: $targetField) {\n    sourceExpression\n    description\n    type\n    targetField\n  }\n}\n    ";
exports.SetUserMetadataDocument = "\n    mutation setUserMetadata($input: SetUserMetadataInput!) {\n  setUserMetadata(input: $input) {\n    totalCount\n    list {\n      key\n      value\n    }\n  }\n}\n    ";
exports.SignInDocument = "\n    mutation signIn($oidcAppId: String, $userPoolId: String, $email: String, $password: String, $phone: String, $unionid: String, $username: String) {\n  signIn(oidcAppId: $oidcAppId, userPoolId: $userPoolId, email: $email, password: $password, phone: $phone, unionid: $unionid, username: $username) {\n    sub\n    birthdate\n    family_name\n    gender\n    given_name\n    locale\n    middle_name\n    name\n    nickname\n    picture\n    preferred_username\n    profile\n    updated_at\n    website\n    zoneinfo\n    username\n    _id\n    company\n    browser\n    device\n    logins_count\n    register_method\n    blocked\n    last_ip\n    register_in_userpool\n    last_login\n    signed_up\n    email\n    email_verified\n    phone_number\n    phone_number_verified\n    token\n    access_token\n    id_token\n    refresh_token\n    expires_in\n    token_type\n    scope\n  }\n}\n    ";
exports.StartDingTalkCorpInitialSyncDocument = "\n    mutation startDingTalkCorpInitialSync($userPoolId: String!, $corpId: String!) {\n  startDingTalkCorpInitialSync(userPoolId: $userPoolId, corpId: $corpId) {\n    code\n    message\n    orgId\n  }\n}\n    ";
exports.StartWechatWorkCorpInitialSyncDocument = "\n    mutation startWechatWorkCorpInitialSync($userPoolId: String!, $corpId: String!) {\n  startWechatWorkCorpInitialSync(userPoolId: $userPoolId, corpId: $corpId) {\n    code\n    message\n    orgId\n  }\n}\n    ";
exports.UnbindEmailDocument = "\n    mutation unbindEmail($user: String, $client: String) {\n  unbindEmail(user: $user, client: $client) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.UnbindOtherOAuthDocument = "\n    mutation unbindOtherOAuth($type: String!, $client: String, $user: String) {\n  unbindOtherOAuth(type: $type, client: $client, user: $user) {\n    _id\n    user\n    client\n    type\n    unionid\n    userInfo\n    createdAt\n  }\n}\n    ";
exports.UpdateAdConnectorDocument = "\n    mutation updateAdConnector($_id: String!, $name: String, $logo: String) {\n  updateAdConnector(_id: $_id, name: $name, logo: $logo) {\n    _id\n    name\n    secret\n    salt\n    logo\n    enabled\n    userPoolId\n    status\n    createdAt\n  }\n}\n    ";
exports.UpdateClientWebhookDocument = "\n    mutation updateClientWebhook($id: String!, $events: [String!]!, $url: String!, $contentType: String!, $enable: Boolean!, $secret: String, $isLastTimeSuccess: Boolean) {\n  updateClientWebhook(id: $id, events: $events, url: $url, contentType: $contentType, enable: $enable, secret: $secret, isLastTimeSuccess: $isLastTimeSuccess) {\n    _id\n    client\n    events {\n      name\n      label\n      description\n    }\n    url\n    isLastTimeSuccess\n    contentType\n    secret\n    enable\n  }\n}\n    ";
exports.UpdateCollaboratorDocument = "\n    mutation updateCollaborator($collaborationId: String!, $permissionDescriptors: [PermissionDescriptorsInputType]!) {\n  updateCollaborator(collaborationId: $collaborationId, permissionDescriptors: $permissionDescriptors) {\n    _id\n    createdAt\n    owner {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    collaborator {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    userPool {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    permissionDescriptors {\n      permissionId\n      name\n      operationAllow\n    }\n  }\n}\n    ";
exports.UpdateEmailDocument = "\n    mutation updateEmail($userPoolId: String!, $email: String!, $emailCode: String!, $oldEmail: String, $oldEmailCode: String) {\n  updateEmail(userPoolId: $userPoolId, email: $email, emailCode: $emailCode, oldEmail: $oldEmail, oldEmailCode: $oldEmailCode) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.UpdateOrgDocument = "\n    mutation updateOrg($input: UpdateOrgInput!) {\n  updateOrg(input: $input) {\n    _id\n    logo\n    nodes {\n      _id\n      name\n      description\n      createdAt\n      updatedAt\n      children\n      root\n      depth\n    }\n  }\n}\n    ";
exports.UpdatePasswordStrengthSettingsByUserPoolIdDocument = "\n    mutation updatePasswordStrengthSettingsByUserPoolId($userPoolId: String!, $pwdStrength: Int) {\n  updatePasswordStrengthSettingsByUserPoolId(userPoolId: $userPoolId, pwdStrength: $pwdStrength) {\n    userPoolId\n    pwdStrength\n  }\n}\n    ";
exports.UpdatePermissionsDocument = "\n    mutation updatePermissions($role: String!, $client: String!, $permissions: String) {\n  updatePermissions(role: $role, client: $client, permissions: $permissions) {\n    _id\n    name\n    descriptions\n    client\n    permissions\n    createdAt\n  }\n}\n    ";
exports.UpdatePhoneDocument = "\n    mutation updatePhone($userPoolId: String!, $phone: String!, $phoneCode: String!, $oldPhone: String, $oldPhoneCode: String) {\n  updatePhone(userPoolId: $userPoolId, phone: $phone, phoneCode: $phoneCode, oldPhone: $oldPhone, oldPhoneCode: $oldPhoneCode) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.UpdateRbacGroupDocument = "\n    mutation updateRBACGroup($sortBy: SortByEnum, $page: Int, $count: Int, $input: UpdateRBACGroupInput!) {\n  updateRBACGroup(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.UpdateRbacPermissionDocument = "\n    mutation updateRBACPermission($input: UpdateRBACPermissionInput!) {\n  updateRBACPermission(input: $input) {\n    _id\n    name\n    userPoolId\n    createdAt\n    updatedAt\n    description\n  }\n}\n    ";
exports.UpdateRbacRoleDocument = "\n    mutation updateRBACRole($sortBy: SortByEnum, $page: Int, $count: Int, $input: UpdateRBACRoleInput!) {\n  updateRBACRole(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.UpdateRoleDocument = "\n    mutation updateRole($_id: String!, $client: String!, $name: String!, $descriptions: String, $permissions: String) {\n  updateRole(_id: $_id, client: $client, name: $name, descriptions: $descriptions, permissions: $permissions) {\n    _id\n    name\n    descriptions\n    client\n    permissions\n    createdAt\n  }\n}\n    ";
exports.UpdateRuleDocument = "\n    mutation updateRule($input: UpdateRuleInput!) {\n  updateRule(input: $input) {\n    _id\n    userPoolId\n    name\n    description\n    type\n    enabled\n    faasUrl\n    code\n    order\n    async\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.UpdateRuleOrderDocument = "\n    mutation updateRuleOrder($input: UpdateRuleOrderInput!) {\n  updateRuleOrder(input: $input) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.UpdateSuperAdminUserDocument = "\n    mutation updateSuperAdminUser($options: SuperAdminUpdateInput!) {\n  updateSuperAdminUser(options: $options) {\n    email\n    username\n    _id\n    upgrade\n  }\n}\n    ";
exports.UpdateUserDocument = "\n    mutation updateUser($options: UserUpdateInput!) {\n  updateUser(options: $options) {\n    _id\n    username\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    nickname\n    company\n    photo\n    browser\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    oldPassword\n    metadata\n  }\n}\n    ";
exports.UpdateUserClientDocument = "\n    mutation updateUserClient($client: UpdateUserClientInput!) {\n  updateUserClient(client: $client) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.VerifyResetPasswordVerifyCodeDocument = "\n    mutation verifyResetPasswordVerifyCode($verifyCode: String!, $email: String!, $client: String!) {\n  verifyResetPasswordVerifyCode(verifyCode: $verifyCode, email: $email, client: $client) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.DingTalkCorpDocument = "\n    query DingTalkCorp($userPoolId: String!, $corpId: String!) {\n  DingTalkCorp(userPoolId: $userPoolId, corpId: $corpId) {\n    corpId\n    twoWaySynchronizationOn\n    createdAt\n    updatedAt\n    AESKey\n    token\n    orgId\n  }\n}\n    ";
exports.GetOidcAppInfoDocument = "\n    query GetOIDCAppInfo($appId: String!) {\n  GetOIDCAppInfo(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    redirect_uris\n    client_id\n    client_secret\n    token_endpoint_auth_method\n    id_token_signed_response_alg\n    id_token_encrypted_response_alg\n    id_token_encrypted_response_enc\n    userinfo_signed_response_alg\n    userinfo_encrypted_response_alg\n    userinfo_encrypted_response_enc\n    request_object_signing_alg\n    request_object_encryption_alg\n    request_object_encryption_enc\n    jwks_uri\n    _jwks_uri\n    custom_jwks\n    jwks\n    _jwks\n    clientId\n    grant_types\n    response_types\n    description\n    homepageURL\n    isDeleted\n    isDefault\n    when\n    css\n    authorization_code_expire\n    id_token_expire\n    access_token_expire\n    refresh_token_expire\n    cas_expire\n    loginUrl\n    customStyles {\n      forceLogin\n      hideQRCode\n      hideUP\n      hideUsername\n      hideRegister\n      hidePhone\n      hideSocial\n      hideClose\n      hidePhonePassword\n      defaultLoginMethod\n    }\n    isForTeamory\n    confirmAuthorization\n  }\n}\n    ";
exports.GetOidcAppListDocument = "\n    query GetOIDCAppList($clientId: String, $page: Int, $count: Int) {\n  GetOIDCAppList(clientId: $clientId, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      name\n      domain\n      image\n      redirect_uris\n      client_id\n      client_secret\n      token_endpoint_auth_method\n      id_token_signed_response_alg\n      id_token_encrypted_response_alg\n      id_token_encrypted_response_enc\n      userinfo_signed_response_alg\n      userinfo_encrypted_response_alg\n      userinfo_encrypted_response_enc\n      request_object_signing_alg\n      request_object_encryption_alg\n      request_object_encryption_enc\n      jwks_uri\n      _jwks_uri\n      custom_jwks\n      jwks\n      _jwks\n      clientId\n      grant_types\n      response_types\n      description\n      homepageURL\n      isDeleted\n      isDefault\n      when\n      css\n      authorization_code_expire\n      id_token_expire\n      access_token_expire\n      refresh_token_expire\n      cas_expire\n      loginUrl\n      isForTeamory\n      confirmAuthorization\n    }\n  }\n}\n    ";
exports.GetSamlIdentityProviderInfoDocument = "\n    query GetSAMLIdentityProviderInfo($appId: String!) {\n  GetSAMLIdentityProviderInfo(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.GetSamlIdentityProviderListDocument = "\n    query GetSAMLIdentityProviderList($clientId: String, $page: Int, $count: Int) {\n  GetSAMLIdentityProviderList(clientId: $clientId, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      name\n      domain\n      image\n      appSecret\n      appId\n      clientId\n      description\n      isDeleted\n      enabled\n      when\n      SPMetadata\n      attributeNameFormat\n      customAttributes\n      emailDomainTransformation\n      authnContextClassRef\n      IdPMetadata\n      assertionConsumerUrl\n      bindings\n      nameIds\n      attributes\n      enableSignRes\n      resSignAlgorithm\n      resAbstractAlgorithm\n      resSignPublicKey\n      resSignPrivateKey\n      resSignPrivateKeyPass\n      enableSignReq\n      reqSignPublicKey\n      enableEncryptRes\n      resEncryptPublicKey\n      css\n    }\n  }\n}\n    ";
exports.GetSamlServiceProviderInfoDocument = "\n    query GetSAMLServiceProviderInfo($appId: String!) {\n  GetSAMLServiceProviderInfo(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.GetSamlServiceProviderListDocument = "\n    query GetSAMLServiceProviderList($clientId: String, $page: Int, $count: Int) {\n  GetSAMLServiceProviderList(clientId: $clientId, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      name\n      domain\n      image\n      appSecret\n      defaultIdPMapId\n      appId\n      clientId\n      description\n      isDeleted\n      enabled\n      when\n      SPMetadata\n      IdPMetadata\n      IdPEntityID\n      redirectUrl\n      loginUrl\n      logoutUrl\n      nameId\n      enableSignRes\n      resSignPublicKey\n      hasResEncrypted\n      resEncryptAlgorithm\n      resAbstractAlgorithm\n      resDecryptPrivateKey\n      resDecryptPrivateKeyPass\n      resEncryptPublicKey\n      enableSignReq\n      reqSignAlgorithm\n      reqAbstractAlgorithm\n      reqSignPrivateKey\n      reqSignPrivateKeyPass\n      reqSignPublicKey\n      SPUrl\n    }\n  }\n}\n    ";
exports.GetUserAuthorizedAppsDocument = "\n    query GetUserAuthorizedApps($clientId: String, $userId: String, $page: Int, $count: Int) {\n  GetUserAuthorizedApps(clientId: $clientId, userId: $userId, page: $page, count: $count) {\n    totalCount\n    OAuthApps {\n      _id\n      name\n      domain\n      image\n      redirectUris\n      appSecret\n      client_id\n      clientId\n      grants\n      description\n      homepageURL\n      isDeleted\n      when\n      css\n      loginUrl\n      casExpire\n    }\n    OIDCApps {\n      _id\n      name\n      domain\n      image\n      redirect_uris\n      client_id\n      client_secret\n      token_endpoint_auth_method\n      id_token_signed_response_alg\n      id_token_encrypted_response_alg\n      id_token_encrypted_response_enc\n      userinfo_signed_response_alg\n      userinfo_encrypted_response_alg\n      userinfo_encrypted_response_enc\n      request_object_signing_alg\n      request_object_encryption_alg\n      request_object_encryption_enc\n      jwks_uri\n      _jwks_uri\n      custom_jwks\n      jwks\n      _jwks\n      clientId\n      grant_types\n      response_types\n      description\n      homepageURL\n      isDeleted\n      isDefault\n      when\n      css\n      authorization_code_expire\n      id_token_expire\n      access_token_expire\n      refresh_token_expire\n      cas_expire\n      loginUrl\n      isForTeamory\n      confirmAuthorization\n    }\n  }\n}\n    ";
exports.PreviewEmailByTypeDocument = "\n    query PreviewEmailByType($type: String!, $client: String!, $meta_data: String) {\n  PreviewEmailByType(type: $type, client: $client, meta_data: $meta_data)\n}\n    ";
exports.QueryAppInfoByAppIdDocument = "\n    query QueryAppInfoByAppID($appId: String, $responseType: String, $redirectUrl: String) {\n  QueryAppInfoByAppID(appId: $appId, responseType: $responseType, redirectUrl: $redirectUrl) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.QueryAppInfoByDomainDocument = "\n    query QueryAppInfoByDomain($domain: String) {\n  QueryAppInfoByDomain(domain: $domain) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.QueryClientHasLdapConfigsDocument = "\n    query QueryClientHasLDAPConfigs($clientId: String) {\n  QueryClientHasLDAPConfigs(clientId: $clientId) {\n    result\n  }\n}\n    ";
exports.QueryClientIdByAppIdDocument = "\n    query QueryClientIdByAppId($appId: String) {\n  QueryClientIdByAppId(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.QueryDefaultSamlIdentityProviderSettingsListDocument = "\n    query QueryDefaultSAMLIdentityProviderSettingsList($page: Int, $count: Int) {\n  QueryDefaultSAMLIdentityProviderSettingsList(page: $page, count: $count) {\n    list {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    totalCount\n  }\n}\n    ";
exports.QueryLdapServerListDocument = "\n    query QueryLDAPServerList($clientId: String!, $page: Int, $count: Int) {\n  QueryLDAPServerList(clientId: $clientId, page: $page, count: $count) {\n    list {\n      _id\n      name\n      clientId\n      userId\n      ldapLink\n      baseDN\n      searchStandard\n      emailPostfix\n      username\n      password\n      description\n      enabled\n      isDeleted\n      createdAt\n      updatedAt\n    }\n    totalCount\n  }\n}\n    ";
exports.QueryOidcAppInfoByAppIdDocument = "\n    query QueryOIDCAppInfoByAppID($appId: String, $responseType: String, $redirectUrl: String) {\n  QueryOIDCAppInfoByAppID(appId: $appId, responseType: $responseType, redirectUrl: $redirectUrl) {\n    _id\n    name\n    domain\n    image\n    redirect_uris\n    client_id\n    client_secret\n    token_endpoint_auth_method\n    id_token_signed_response_alg\n    id_token_encrypted_response_alg\n    id_token_encrypted_response_enc\n    userinfo_signed_response_alg\n    userinfo_encrypted_response_alg\n    userinfo_encrypted_response_enc\n    request_object_signing_alg\n    request_object_encryption_alg\n    request_object_encryption_enc\n    jwks_uri\n    _jwks_uri\n    custom_jwks\n    jwks\n    _jwks\n    clientId\n    grant_types\n    response_types\n    description\n    homepageURL\n    isDeleted\n    isDefault\n    when\n    css\n    authorization_code_expire\n    id_token_expire\n    access_token_expire\n    refresh_token_expire\n    cas_expire\n    loginUrl\n    customStyles {\n      forceLogin\n      hideQRCode\n      hideUP\n      hideUsername\n      hideRegister\n      hidePhone\n      hideSocial\n      hideClose\n      hidePhonePassword\n      defaultLoginMethod\n    }\n    isForTeamory\n    confirmAuthorization\n  }\n}\n    ";
exports.QueryOidcAppInfoByDomainDocument = "\n    query QueryOIDCAppInfoByDomain($domain: String) {\n  QueryOIDCAppInfoByDomain(domain: $domain) {\n    _id\n    name\n    domain\n    image\n    redirect_uris\n    client_id\n    client_secret\n    token_endpoint_auth_method\n    id_token_signed_response_alg\n    id_token_encrypted_response_alg\n    id_token_encrypted_response_enc\n    userinfo_signed_response_alg\n    userinfo_encrypted_response_alg\n    userinfo_encrypted_response_enc\n    request_object_signing_alg\n    request_object_encryption_alg\n    request_object_encryption_enc\n    jwks_uri\n    _jwks_uri\n    custom_jwks\n    jwks\n    _jwks\n    clientId\n    grant_types\n    response_types\n    description\n    homepageURL\n    isDeleted\n    isDefault\n    when\n    css\n    authorization_code_expire\n    id_token_expire\n    access_token_expire\n    refresh_token_expire\n    cas_expire\n    loginUrl\n    customStyles {\n      forceLogin\n      hideQRCode\n      hideUP\n      hideUsername\n      hideRegister\n      hidePhone\n      hideSocial\n      hideClose\n      hidePhonePassword\n      defaultLoginMethod\n    }\n    isForTeamory\n    confirmAuthorization\n  }\n}\n    ";
exports.QuerySamlIdentityProviderInfoByAppIdDocument = "\n    query QuerySAMLIdentityProviderInfoByAppID($appId: String) {\n  QuerySAMLIdentityProviderInfoByAppID(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.QuerySamlIdentityProviderInfoByDomainDocument = "\n    query QuerySAMLIdentityProviderInfoByDomain($domain: String) {\n  QuerySAMLIdentityProviderInfoByDomain(domain: $domain) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    attributeNameFormat\n    customAttributes\n    emailDomainTransformation\n    authnContextClassRef\n    IdPMetadata\n    assertionConsumerUrl\n    bindings\n    nameIds\n    attributes\n    enableSignRes\n    resSignAlgorithm\n    resAbstractAlgorithm\n    resSignPublicKey\n    resSignPrivateKey\n    resSignPrivateKeyPass\n    enableSignReq\n    reqSignPublicKey\n    enableEncryptRes\n    resEncryptPublicKey\n    css\n  }\n}\n    ";
exports.QuerySamlServiceProviderInfoByAppIdDocument = "\n    query QuerySAMLServiceProviderInfoByAppID($appId: String!) {\n  QuerySAMLServiceProviderInfoByAppID(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.QuerySamlServiceProviderInfoByDomainDocument = "\n    query QuerySAMLServiceProviderInfoByDomain($domain: String!) {\n  QuerySAMLServiceProviderInfoByDomain(domain: $domain) {\n    _id\n    name\n    domain\n    image\n    appSecret\n    defaultIdPMap {\n      _id\n      name\n      image\n      description\n      isDeleted\n    }\n    defaultIdPMapId\n    appId\n    clientId\n    description\n    isDeleted\n    enabled\n    when\n    SPMetadata\n    IdPMetadata\n    IdPEntityID\n    assertionConsumeService {\n      binding\n      url\n      isDefault\n    }\n    mappings {\n      username\n      nickname\n      photo\n      company\n      providerName\n      email\n    }\n    redirectUrl\n    loginUrl\n    logoutUrl\n    nameId\n    enableSignRes\n    resSignPublicKey\n    hasResEncrypted\n    resEncryptAlgorithm\n    resAbstractAlgorithm\n    resDecryptPrivateKey\n    resDecryptPrivateKeyPass\n    resEncryptPublicKey\n    enableSignReq\n    reqSignAlgorithm\n    reqAbstractAlgorithm\n    reqSignPrivateKey\n    reqSignPrivateKeyPass\n    reqSignPublicKey\n    SPUrl\n  }\n}\n    ";
exports.ReadEmailProviderDocument = "\n    query ReadEmailProvider($clientId: String) {\n  ReadEmailProvider(clientId: $clientId) {\n    _id\n    name\n    image\n    description\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    client\n    user\n    status\n    provider {\n      _id\n      name\n      image\n      description\n      client\n      user\n      status\n    }\n  }\n}\n    ";
exports.ReadEmailProviderByClientAndNameDocument = "\n    query ReadEmailProviderByClientAndName($clientId: String) {\n  ReadEmailProviderByClientAndName(clientId: $clientId) {\n    _id\n    user\n    client\n    status\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    provider {\n      _id\n      name\n      image\n      description\n    }\n  }\n}\n    ";
exports.ReadEmailProviderWithClientDocument = "\n    query ReadEmailProviderWithClient {\n  ReadEmailProviderWithClient {\n    _id\n    user\n    client\n    status\n    fields {\n      label\n      type\n      placeholder\n      help\n      value\n      options\n    }\n    provider {\n      _id\n      name\n      image\n      description\n    }\n  }\n}\n    ";
exports.ReadEmailSentListDocument = "\n    query ReadEmailSentList($page: Int, $count: Int, $sortBy: String) {\n  ReadEmailSentList(page: $page, count: $count, sortBy: $sortBy) {\n    list {\n      _id\n      subject\n      content\n      sender\n      receivers\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.ReadEmailSentListByClientDocument = "\n    query ReadEmailSentListByClient($client: String!, $page: Int, $count: Int) {\n  ReadEmailSentListByClient(client: $client, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      user\n      subject\n      content\n      sender\n      receivers\n      post\n      createdAt\n      rejected\n      isDeleted\n      client\n    }\n  }\n}\n    ";
exports.ReadEmailTemplateByClientAndTypeDocument = "\n    query ReadEmailTemplateByClientAndType($type: String!, $client: String!) {\n  ReadEmailTemplateByClientAndType(type: $type, client: $client) {\n    _id\n    type\n    sender\n    object\n    hasURL\n    URLExpireTime\n    status\n    redirectTo\n    content\n  }\n}\n    ";
exports.ReadEmailTemplatesByClientDocument = "\n    query ReadEmailTemplatesByClient($clientId: String!) {\n  ReadEmailTemplatesByClient(clientId: $clientId) {\n    _id\n    user\n    client\n    template {\n      _id\n      type\n      sender\n      object\n      hasURL\n      URLExpireTime\n      status\n      redirectTo\n      content\n    }\n    type\n    sender\n    object\n    hasURL\n    URLExpireTime\n    redirectTo\n    status\n    content\n  }\n}\n    ";
exports.ReadEmailTemplatesBySystemDocument = "\n    query ReadEmailTemplatesBySystem {\n  ReadEmailTemplatesBySystem {\n    _id\n    user\n    client\n    template {\n      _id\n      type\n      sender\n      object\n      hasURL\n      URLExpireTime\n      status\n      redirectTo\n      content\n    }\n    type\n    sender\n    object\n    hasURL\n    URLExpireTime\n    redirectTo\n    status\n    content\n  }\n}\n    ";
exports.ReadOauthListDocument = "\n    query ReadOauthList($clientId: String, $dontGetURL: Boolean, $useGuard: Boolean) {\n  ReadOauthList(clientId: $clientId, dontGetURL: $dontGetURL, useGuard: $useGuard) {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.ReadOrdersDocument = "\n    query ReadOrders($user: String, $page: Int, $count: Int) {\n  ReadOrders(user: $user, page: $page, count: $count) {\n    list {\n      _id\n      client\n      user\n      timeOfPurchase\n      flowNumber\n      price\n      createdAt\n      completed\n      payMethod\n      endAt\n    }\n    totalCount\n  }\n}\n    ";
exports.ReadSamlspListDocument = "\n    query ReadSAMLSPList($clientId: String!) {\n  ReadSAMLSPList(clientId: $clientId) {\n    providerName\n    url\n    logo\n  }\n}\n    ";
exports.ReadSystemPricingDocument = "\n    query ReadSystemPricing {\n  ReadSystemPricing {\n    _id\n    type\n    startNumber\n    freeNumber\n    startPrice\n    maxNumber\n    d\n    features\n  }\n}\n    ";
exports.ReadUserPricingDocument = "\n    query ReadUserPricing($userId: String, $clientId: String) {\n  ReadUserPricing(userId: $userId, clientId: $clientId) {\n    user\n    client\n    isFree\n    pricing {\n      number\n    }\n    freeNumber\n  }\n}\n    ";
exports.TestLdapServerDocument = "\n    query TestLDAPServer($name: String!, $clientId: String!, $userId: String!, $ldapLink: String!, $baseDN: String!, $searchStandard: String!, $username: String!, $password: String!, $emailPostfix: String, $description: String, $enabled: Boolean) {\n  TestLDAPServer(name: $name, clientId: $clientId, userId: $userId, ldapLink: $ldapLink, baseDN: $baseDN, searchStandard: $searchStandard, username: $username, password: $password, emailPostfix: $emailPostfix, description: $description, enabled: $enabled) {\n    result\n  }\n}\n    ";
exports.TestLdapUserDocument = "\n    query TestLDAPUser($testUsername: String!, $testPassword: String!, $name: String!, $clientId: String!, $userId: String!, $ldapLink: String!, $baseDN: String!, $searchStandard: String!, $username: String!, $password: String!, $emailPostfix: String, $description: String, $enabled: Boolean) {\n  TestLDAPUser(testUsername: $testUsername, testPassword: $testPassword, name: $name, clientId: $clientId, userId: $userId, ldapLink: $ldapLink, baseDN: $baseDN, searchStandard: $searchStandard, username: $username, password: $password, emailPostfix: $emailPostfix, description: $description, enabled: $enabled) {\n    result\n  }\n}\n    ";
exports.AdConnectorByProviderDocument = "\n    query adConnectorByProvider($providerId: String!, $providerType: providerType!) {\n  adConnectorByProvider(providerId: $providerId, providerType: $providerType) {\n    _id\n    name\n    logo\n    status\n  }\n}\n    ";
exports.AdConnectorListDocument = "\n    query adConnectorList($userPoolId: String!, $providerType: providerType) {\n  adConnectorList(userPoolId: $userPoolId, providerType: $providerType) {\n    _id\n    name\n    secret\n    salt\n    logo\n    enabled\n    userPoolId\n    status\n    createdAt\n  }\n}\n    ";
exports.BindedOAuthListDocument = "\n    query bindedOAuthList($client: String!, $user: String) {\n  bindedOAuthList(client: $client, user: $user) {\n    _id\n    user\n    client\n    type\n    unionid\n    userInfo\n    createdAt\n  }\n}\n    ";
exports.CheckAdConnectorStatusDocument = "\n    query checkAdConnectorStatus($adConnectorId: String!) {\n  checkAdConnectorStatus(adConnectorId: $adConnectorId)\n}\n    ";
exports.CheckIsReservedDomainDocument = "\n    query checkIsReservedDomain($domainValue: String!) {\n  checkIsReservedDomain(domainValue: $domainValue) {\n    domainValue\n    isReserved\n  }\n}\n    ";
exports.CheckLoginStatusDocument = "\n    query checkLoginStatus($token: String) {\n  checkLoginStatus(token: $token) {\n    message\n    code\n    status\n    token {\n      iat\n      exp\n    }\n  }\n}\n    ";
exports.CheckPhoneCodeDocument = "\n    query checkPhoneCode($userPoolId: String!, $phone: String!, $phoneCode: String!) {\n  checkPhoneCode(userPoolId: $userPoolId, phone: $phone, phoneCode: $phoneCode) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.ClientDocument = "\n    query client($id: String!, $userId: String, $fromAdmin: Boolean) {\n  client(id: $id, userId: $userId, fromAdmin: $fromAdmin) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.ClientRolesDocument = "\n    query clientRoles($client: String!, $page: Int, $count: Int) {\n  clientRoles(client: $client, page: $page, count: $count) {\n    list {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.DecodeJwtTokenDocument = "\n    query decodeJwtToken($token: String) {\n  decodeJwtToken(token: $token) {\n    data {\n      email\n      id\n      clientId\n      unionid\n    }\n    status {\n      message\n      code\n      status\n    }\n    iat\n    exp\n  }\n}\n    ";
exports.EmailDomainTopNListDocument = "\n    query emailDomainTopNList($userPoolId: String!) {\n  emailDomainTopNList(userPoolId: $userPoolId) {\n    domain\n    count\n  }\n}\n    ";
exports.FindClientsByIdArrayDocument = "\n    query findClientsByIdArray($clientsId: [String]) {\n  findClientsByIdArray(clientsId: $clientsId) {\n    list {\n      _id\n      name\n      createdAt\n      usersCount\n    }\n    totalCount\n  }\n}\n    ";
exports.GetAccessTokenByAppSecretDocument = "\n    query getAccessTokenByAppSecret($secret: String, $clientId: String, $retUserId: Boolean, $timestamp: String, $signature: String, $nonce: Int) {\n  getAccessTokenByAppSecret(secret: $secret, clientId: $clientId, retUserId: $retUserId, timestamp: $timestamp, signature: $signature, nonce: $nonce)\n}\n    ";
exports.GetAllWebhooksDocument = "\n    query getAllWebhooks($client: String!) {\n  getAllWebhooks(client: $client) {\n    _id\n    client\n    events {\n      name\n      label\n      description\n    }\n    url\n    isLastTimeSuccess\n    contentType\n    secret\n    enable\n  }\n}\n    ";
exports.GetAppSecretByClientIdDocument = "\n    query getAppSecretByClientId($token: String, $clientId: String) {\n  getAppSecretByClientId(token: $token, clientId: $clientId) {\n    secret\n    clientId\n  }\n}\n    ";
exports.GetClientWhenSdkInitDocument = "\n    query getClientWhenSdkInit($secret: String, $clientId: String, $retUserId: Boolean, $timestamp: String, $signature: String, $nonce: Int) {\n  getClientWhenSdkInit(secret: $secret, clientId: $clientId, retUserId: $retUserId, timestamp: $timestamp, signature: $signature, nonce: $nonce) {\n    clientInfo {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    accessToken\n  }\n}\n    ";
exports.GetCustomMfaDocument = "\n    query getCustomMFA($userIdInMiniLogin: String!, $page: Int, $count: Int) {\n  getCustomMFA(userIdInMiniLogin: $userIdInMiniLogin, page: $page, count: $count) {\n    list {\n      _id\n      userIdInMiniLogin\n      remark\n      name\n      secret\n    }\n    total\n  }\n}\n    ";
exports.GetOAuthedAppInfoDocument = "\n    query getOAuthedAppInfo($appId: String!) {\n  getOAuthedAppInfo(appId: $appId) {\n    _id\n    name\n    domain\n    image\n    redirectUris\n    appSecret\n    client_id\n    clientId\n    grants\n    description\n    homepageURL\n    isDeleted\n    when\n    css\n    loginUrl\n    casExpire\n  }\n}\n    ";
exports.GetOAuthedAppListDocument = "\n    query getOAuthedAppList($clientId: String, $page: Int, $count: Int) {\n  getOAuthedAppList(clientId: $clientId, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      name\n      domain\n      image\n      redirectUris\n      appSecret\n      client_id\n      clientId\n      grants\n      description\n      homepageURL\n      isDeleted\n      when\n      css\n      loginUrl\n      casExpire\n    }\n  }\n}\n    ";
exports.GetUserLoginAreaStatisticOfClientDocument = "\n    query getUserLoginAreaStatisticOfClient($userPool: String!, $start: String, $end: String) {\n  getUserLoginAreaStatisticOfClient(userPool: $userPool, start: $start, end: $end)\n}\n    ";
exports.GetUserPoolByDomainDocument = "\n    query getUserPoolByDomain($domain: String!) {\n  getUserPoolByDomain(domain: $domain) {\n    _id\n    name\n    domain\n    logo\n    iamType\n    userLimit\n    createdAt\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.GetUserPoolSettingsDocument = "\n    query getUserPoolSettings($userPoolId: String!) {\n  getUserPoolSettings(userPoolId: $userPoolId) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.GetWebhookDetailDocument = "\n    query getWebhookDetail($client: String!) {\n  getWebhookDetail(client: $client) {\n    _id\n    client\n    events {\n      name\n      label\n      description\n    }\n    url\n    isLastTimeSuccess\n    contentType\n    secret\n    enable\n  }\n}\n    ";
exports.GetWebhookLogDetailDocument = "\n    query getWebhookLogDetail($id: String!) {\n  getWebhookLogDetail(id: $id) {\n    _id\n    webhook\n    client\n    event\n    request {\n      headers\n      payload\n    }\n    response {\n      headers\n      body\n      statusCode\n    }\n    errorMessage\n    when\n  }\n}\n    ";
exports.GetWebhookLogsDocument = "\n    query getWebhookLogs($webhook: String!) {\n  getWebhookLogs(webhook: $webhook) {\n    _id\n    webhook\n    client\n    event\n    request {\n      headers\n      payload\n    }\n    response {\n      headers\n      body\n      statusCode\n    }\n    errorMessage\n    when\n  }\n}\n    ";
exports.GetWebhookSettingOptionsDocument = "\n    query getWebhookSettingOptions {\n  getWebhookSettingOptions {\n    webhookEvents {\n      name\n      label\n      description\n    }\n    contentTypes {\n      name\n      label\n    }\n  }\n}\n    ";
exports.GroupMetadataDocument = "\n    query groupMetadata($_id: String!) {\n  groupMetadata(_id: $_id) {\n    key\n    value\n  }\n}\n    ";
exports.InterConnectionsDocument = "\n    query interConnections($userPoolId: String!) {\n  interConnections(userPoolId: $userPoolId) {\n    sourceUserPoolId\n    sourceUserId\n    targetUserPoolId\n    targetUserId\n    enabled\n    expiresdAt\n  }\n}\n    ";
exports.IsAdConnectorAliveDocument = "\n    query isAdConnectorAlive($adConnectorId: String) {\n  isAdConnectorAlive(adConnectorId: $adConnectorId) {\n    isAlive\n  }\n}\n    ";
exports.IsAppAuthorizedByUserDocument = "\n    query isAppAuthorizedByUser($userId: String, $appId: String) {\n  isAppAuthorizedByUser(userId: $userId, appId: $appId) {\n    authorized\n  }\n}\n    ";
exports.IsClientBelongToUserDocument = "\n    query isClientBelongToUser($userId: String, $clientId: String, $permissionDescriptors: [PermissionDescriptorsListInputType]) {\n  isClientBelongToUser(userId: $userId, clientId: $clientId, permissionDescriptors: $permissionDescriptors)\n}\n    ";
exports.IsClientOfUserDocument = "\n    query isClientOfUser($email: String, $password: String, $clientId: String) {\n  isClientOfUser(email: $email, password: $password, clientId: $clientId)\n}\n    ";
exports.IsDomainAvaliableDocument = "\n    query isDomainAvaliable($domain: String!) {\n  isDomainAvaliable(domain: $domain)\n}\n    ";
exports.IsLoginExpiredDocument = "\n    query isLoginExpired($id: String!) {\n  isLoginExpired(id: $id)\n}\n    ";
exports.IsRootNodeOfOrgDocument = "\n    query isRootNodeOfOrg($input: IsRootNodeOfOrgInput!) {\n  isRootNodeOfOrg(input: $input)\n}\n    ";
exports.IsUserInGroupDocument = "\n    query isUserInGroup($groupId: String!, $userId: String!) {\n  isUserInGroup(groupId: $groupId, userId: $userId)\n}\n    ";
exports.LoginCountDocument = "\n    query loginCount($userId: String, $clientId: String, $month: String) {\n  loginCount(userId: $userId, clientId: $clientId, month: $month) {\n    _id\n    client\n    count\n    month\n    isError\n    totalNumber\n  }\n}\n    ";
exports.LoginHotDotPicDataDocument = "\n    query loginHotDotPicData($client: String) {\n  loginHotDotPicData(client: $client) {\n    list\n  }\n}\n    ";
exports.NotBindOAuthListDocument = "\n    query notBindOAuthList($client: String, $user: String) {\n  notBindOAuthList(client: $client, user: $user) {\n    type\n    oAuthUrl\n    image\n    name\n    binded\n  }\n}\n    ";
exports.OrgDocument = "\n    query org($_id: String!) {\n  org(_id: $_id) {\n    _id\n    logo\n    nodes {\n      _id\n      name\n      description\n      createdAt\n      updatedAt\n      children\n      root\n      depth\n    }\n  }\n}\n    ";
exports.OrgChildrenNodesDocument = "\n    query orgChildrenNodes($input: OrgChildrenNodesInput!) {\n  orgChildrenNodes(input: $input) {\n    group {\n      _id\n      userPoolId\n      name\n      description\n      createdAt\n      updatedAt\n    }\n    depth\n  }\n}\n    ";
exports.OrgNodeUserListDocument = "\n    query orgNodeUserList($orgId: String!, $nodeId: String!, $page: Int, $count: Int, $includeChildrenNodes: Boolean) {\n  orgNodeUserList(orgId: $orgId, nodeId: $nodeId, page: $page, count: $count, includeChildrenNodes: $includeChildrenNodes) {\n    list {\n      _id\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      username\n      nickname\n      company\n      photo\n      browser\n      device\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      customData\n      metadata\n      salt\n    }\n    totalCount\n  }\n}\n    ";
exports.OrgRootNodeDocument = "\n    query orgRootNode($sortBy: SortByEnum, $page: Int, $count: Int, $_id: String!) {\n  orgRootNode(_id: $_id) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.OrgsDocument = "\n    query orgs($userPoolId: String!) {\n  orgs(userPoolId: $userPoolId) {\n    totalCount\n    list {\n      _id\n      logo\n    }\n  }\n}\n    ";
exports.PlatformUserGrowthTrendDocument = "\n    query platformUserGrowthTrend($today: String) {\n  platformUserGrowthTrend(today: $today) {\n    day\n    count\n  }\n}\n    ";
exports.PreviewEmailTemplateDocument = "\n    query previewEmailTemplate($type: String, $client: String) {\n  previewEmailTemplate(type: $type, client: $client) {\n    message\n    code\n    status\n  }\n}\n    ";
exports.ProviderListByAdConnectorDocument = "\n    query providerListByADConnector($_id: String!) {\n  providerListByADConnector(_id: $_id) {\n    providerType\n    providerId\n    userPoolId\n    adConnectorId\n  }\n}\n    ";
exports.QiNiuUploadTokenDocument = "\n    query qiNiuUploadToken($type: String) {\n  qiNiuUploadToken(type: $type)\n}\n    ";
exports.QpsByTimeDocument = "\n    query qpsByTime($startTime: String, $endTime: String, $currentTime: String) {\n  qpsByTime(startTime: $startTime, endTime: $endTime, currentTime: $currentTime) {\n    qps\n    time\n  }\n}\n    ";
exports.QueryAuthAuditRecordsDocument = "\n    query queryAuthAuditRecords($userPoolId: String!, $sortBy: String, $page: Int, $count: Int) {\n  queryAuthAuditRecords(userPoolId: $userPoolId, sortBy: $sortBy, page: $page, count: $count) {\n    list {\n      userPoolId\n      appType\n      appId\n      event\n      userId\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.QueryAuthorizedUserPoolDocument = "\n    query queryAuthorizedUserPool($unionid: String, $phone: String, $openid: String, $page: Int, $count: Int) {\n  queryAuthorizedUserPool(unionid: $unionid, phone: $phone, openid: $openid, page: $page, count: $count) {\n    list {\n      userId\n    }\n    total\n  }\n}\n    ";
exports.QueryClientDocument = "\n    query queryClient($id: String!) {\n  queryClient(id: $id) {\n    _id\n    user {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    iamType\n    domain\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLimit\n    userPoolTypes {\n      _id\n      name\n      description\n      image\n      example\n    }\n    usersCount\n    logo\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    showWXMPQRCode\n    useMiniLogin\n    useSelfWxapp\n    allowedOrigins\n    name\n    secret\n    token\n    descriptions\n    jwtExpired\n    createdAt\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enable\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enable\n    }\n    enableEmail\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.QueryCollaborationByUserPoolIdAndUserIdDocument = "\n    query queryCollaborationByUserPoolIdAndUserId($userId: String!, $userPoolId: String!) {\n  queryCollaborationByUserPoolIdAndUserId(userId: $userId, userPoolId: $userPoolId) {\n    _id\n    createdAt\n    owner {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    collaborator {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    userPool {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    permissionDescriptors {\n      permissionId\n      name\n      operationAllow\n    }\n  }\n}\n    ";
exports.QueryCollaborativeUserPoolByUserIdDocument = "\n    query queryCollaborativeUserPoolByUserId($userId: String!, $page: Int, $count: Int) {\n  queryCollaborativeUserPoolByUserId(userId: $userId, page: $page, count: $count) {\n    list {\n      _id\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.QueryCollaboratorPermissionsDocument = "\n    query queryCollaboratorPermissions($userId: String, $collaborationId: String) {\n  queryCollaboratorPermissions(userId: $userId, collaborationId: $collaborationId) {\n    collaborator {\n      _id\n      username\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      nickname\n      company\n      photo\n      browser\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      oldPassword\n      metadata\n    }\n    list {\n      permissionId\n      name\n      operationAllow\n    }\n  }\n}\n    ";
exports.QueryCollaboratorsByUserPoolIdDocument = "\n    query queryCollaboratorsByUserPoolId($userPoolId: String!, $count: Int, $page: Int) {\n  queryCollaboratorsByUserPoolId(userPoolId: $userPoolId, count: $count, page: $page) {\n    collaborationId\n    list {\n      _id\n      createdAt\n    }\n  }\n}\n    ";
exports.QueryInvitationDocument = "\n    query queryInvitation($client: String!) {\n  queryInvitation(client: $client) {\n    client\n    phone\n    isDeleted\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.QueryInvitationStateDocument = "\n    query queryInvitationState($client: String!) {\n  queryInvitationState(client: $client) {\n    client\n    enablePhone\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.QueryMfaDocument = "\n    query queryMFA($_id: String, $userId: String, $userPoolId: String) {\n  queryMFA(_id: $_id, userId: $userId, userPoolId: $userPoolId) {\n    _id\n    userId\n    userPoolId\n    enable\n    shareKey\n  }\n}\n    ";
exports.QueryOperationLogsDocument = "\n    query queryOperationLogs($userPoolId: String!, $coll: String!, $page: Int, $count: Int) {\n  queryOperationLogs(userPoolId: $userPoolId, coll: $coll, page: $page, count: $count) {\n    totalCount\n    list {\n      operatorId\n      operatorName\n      operatorAvatar\n      isAdmin\n      isCollaborator\n      isOwner\n      operationType\n      updatedFields\n      removedFields\n      operateAt\n      fullDocument\n      coll\n    }\n  }\n}\n    ";
exports.QueryPasswordFaasEnabledDocument = "\n    query queryPasswordFaasEnabled($client: String!) {\n  queryPasswordFaasEnabled(client: $client) {\n    encryptUrl\n    decryptUrl\n    user\n    client\n    logs\n    enable\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.QueryPasswordStrengthSettingsByUserPoolIdDocument = "\n    query queryPasswordStrengthSettingsByUserPoolId($userPoolId: String!) {\n  queryPasswordStrengthSettingsByUserPoolId(userPoolId: $userPoolId) {\n    userPoolId\n    pwdStrength\n  }\n}\n    ";
exports.QueryPermissionListDocument = "\n    query queryPermissionList {\n  queryPermissionList {\n    list {\n      _id\n      name\n      affect\n      description\n    }\n    totalCount\n  }\n}\n    ";
exports.QueryProviderInfoByAppIdDocument = "\n    query queryProviderInfoByAppId($appId: String) {\n  queryProviderInfoByAppId(appId: $appId) {\n    _id\n    type\n    name\n    image\n    domain\n    clientId\n    client_id\n    css\n    redirect_uris\n  }\n}\n    ";
exports.QueryProviderInfoByDomainDocument = "\n    query queryProviderInfoByDomain($domain: String) {\n  queryProviderInfoByDomain(domain: $domain) {\n    _id\n    type\n    name\n    image\n    domain\n    clientId\n    client_id\n    css\n    redirect_uris\n  }\n}\n    ";
exports.QueryRoleByUserIdDocument = "\n    query queryRoleByUserId($user: String!, $client: String!) {\n  queryRoleByUserId(user: $user, client: $client) {\n    list {\n      _id\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.QuerySmsSendCountDocument = "\n    query querySMSSendCount($userPoolId: String!) {\n  querySMSSendCount(userPoolId: $userPoolId) {\n    count\n    limitCount\n  }\n}\n    ";
exports.QuerySystemOAuthSettingDocument = "\n    query querySystemOAuthSetting {\n  querySystemOAuthSetting {\n    _id\n    name\n    alias\n    image\n    description\n    enabled\n    url\n    client\n    user\n    oAuthUrl\n    wxappLogo\n    fields {\n      label\n      type\n      placeholder\n      value\n      checked\n    }\n    oauth {\n      _id\n      name\n      alias\n      image\n      description\n      enabled\n      url\n      client\n      user\n      oAuthUrl\n      wxappLogo\n    }\n  }\n}\n    ";
exports.QueryUserPoolCommonInfoDocument = "\n    query queryUserPoolCommonInfo($userPoolId: String!) {\n  queryUserPoolCommonInfo(userPoolId: $userPoolId) {\n    _id\n    name\n    domain\n    logo\n    iamType\n    userLimit\n    createdAt\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n  }\n}\n    ";
exports.RbacGroupDocument = "\n    query rbacGroup($sortBy: SortByEnum, $page: Int, $count: Int, $_id: String!) {\n  rbacGroup(_id: $_id) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RbacGroupListDocument = "\n    query rbacGroupList($userPoolId: String!, $sortBy: SortByEnum, $dissociative: Boolean, $page: Int, $count: Int) {\n  rbacGroupList(userPoolId: $userPoolId, sortBy: $sortBy, dissociative: $dissociative, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      userPoolId\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
exports.RbacPermissionDocument = "\n    query rbacPermission($_id: String!) {\n  rbacPermission(_id: $_id) {\n    _id\n    name\n    userPoolId\n    createdAt\n    updatedAt\n    description\n  }\n}\n    ";
exports.RbacPermissionListDocument = "\n    query rbacPermissionList($userPoolId: String!, $sortBy: SortByEnum, $page: Int, $count: Int) {\n  rbacPermissionList(userPoolId: $userPoolId, sortBy: $sortBy, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      name\n      userPoolId\n      createdAt\n      updatedAt\n      description\n    }\n  }\n}\n    ";
exports.RbacRoleDocument = "\n    query rbacRole($sortBy: SortByEnum, $page: Int, $count: Int, $_id: String!) {\n  rbacRole(_id: $_id) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.RbacRoleListDocument = "\n    query rbacRoleList($userPoolId: String!, $sortBy: SortByEnum, $page: Int, $count: Int) {\n  rbacRoleList(userPoolId: $userPoolId, sortBy: $sortBy, page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      userPoolId\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
exports.RecentServiceCallDocument = "\n    query recentServiceCall($today: String) {\n  recentServiceCall(today: $today) {\n    userService {\n      day\n      count\n    }\n    emailService {\n      day\n      count\n    }\n    oAuthService {\n      day\n      count\n    }\n    payService {\n      day\n      count\n    }\n  }\n}\n    ";
exports.RegisterEveryDayCountDocument = "\n    query registerEveryDayCount($client: String) {\n  registerEveryDayCount(client: $client) {\n    list\n  }\n}\n    ";
exports.RegisterMethodTopListDocument = "\n    query registerMethodTopList($userPoolId: String!) {\n  registerMethodTopList(userPoolId: $userPoolId) {\n    method\n    count\n  }\n}\n    ";
exports.RequestListDocument = "\n    query requestList($page: Int, $count: Int) {\n  requestList(page: $page, count: $count) {\n    totalCount\n    list {\n      _id\n      when\n      where\n      ip\n      size\n      responseTime\n      service\n    }\n  }\n}\n    ";
exports.RuleByIdDocument = "\n    query ruleById($_id: String!) {\n  ruleById(_id: $_id) {\n    _id\n    userPoolId\n    name\n    description\n    type\n    enabled\n    faasUrl\n    code\n    order\n    async\n    createdAt\n    updatedAt\n  }\n}\n    ";
exports.RuleEnvDocument = "\n    query ruleEnv($userPoolId: String!) {\n  ruleEnv(userPoolId: $userPoolId) {\n    totalCount\n    list {\n      key\n      value\n    }\n  }\n}\n    ";
exports.RulesDocument = "\n    query rules($userPoolId: String!) {\n  rules(userPoolId: $userPoolId) {\n    totalCount\n    list {\n      _id\n      userPoolId\n      name\n      description\n      type\n      enabled\n      faasUrl\n      code\n      order\n      async\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
exports.SamlIdPFieldMappingsDocument = "\n    query samlIdPFieldMappings($_id: String!) {\n  samlIdPFieldMappings(_id: $_id) {\n    sourceExpression\n    description\n    type\n    targetField\n  }\n}\n    ";
exports.SearchGroupByMetadataDocument = "\n    query searchGroupByMetadata($userPoolId: String!, $key: String!, $value: String!) {\n  searchGroupByMetadata(userPoolId: $userPoolId, key: $key, value: $value) {\n    totalCount\n    list {\n      _id\n      userPoolId\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
exports.SearchOrgNodeUserDocument = "\n    query searchOrgNodeUser($orgId: String!, $nodeId: String!, $query: String!, $includeChildrenNodes: Boolean) {\n  searchOrgNodeUser(orgId: $orgId, nodeId: $nodeId, query: $query, includeChildrenNodes: $includeChildrenNodes) {\n    list {\n      _id\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      username\n      nickname\n      company\n      photo\n      browser\n      device\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      customData\n      metadata\n      salt\n    }\n    totalCount\n  }\n}\n    ";
exports.SearchOrgNodesDocument = "\n    query searchOrgNodes($sortBy: SortByEnum, $page: Int, $count: Int, $orgId: String!, $name: String, $metadata: [KeyValuePair!]) {\n  searchOrgNodes(orgId: $orgId, name: $name, metadata: $metadata) {\n    _id\n    userPoolId\n    name\n    description\n    createdAt\n    updatedAt\n    roles {\n      totalCount\n    }\n    permissions {\n      totalCount\n    }\n    users(sortBy: $sortBy, page: $page, count: $count) {\n      totalCount\n    }\n  }\n}\n    ";
exports.SearchUserDocument = "\n    query searchUser($type: String!, $value: String!, $registerInClient: String!, $page: Int, $count: Int) {\n  searchUser(type: $type, value: $value, registerInClient: $registerInClient, page: $page, count: $count) {\n    list {\n      _id\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      username\n      nickname\n      company\n      photo\n      browser\n      device\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      customData\n      metadata\n      salt\n    }\n    totalCount\n  }\n}\n    ";
exports.SearchUserBasicInfoByIdDocument = "\n    query searchUserBasicInfoById($userId: String) {\n  searchUserBasicInfoById(userId: $userId) {\n    _id\n    username\n    photo\n    email\n  }\n}\n    ";
exports.StatisticDocument = "\n    query statistic($sortBy: String, $page: Int, $count: Int) {\n  statistic(sortBy: $sortBy, page: $page, count: $count) {\n    list {\n      _id\n      username\n      email\n      loginsCount\n      appsCount\n      OAuthCount\n    }\n    totalCount\n  }\n}\n    ";
exports.SupportedSamlFieldMappingsDocument = "\n    query supportedSAMLFieldMappings {\n  supportedSAMLFieldMappings {\n    name\n    type\n    description\n    editable\n  }\n}\n    ";
exports.TodayGeoDistributionDocument = "\n    query todayGeoDistribution($today: String) {\n  todayGeoDistribution(today: $today) {\n    city\n    size\n    point\n  }\n}\n    ";
exports.UserDocument = "\n    query user($id: String, $registerInClient: String, $token: String, $auth: Boolean, $userLoginHistoryPage: Int, $userLoginHistoryCount: Int) {\n  user(id: $id, registerInClient: $registerInClient, token: $token, auth: $auth, userLoginHistoryPage: $userLoginHistoryPage, userLoginHistoryCount: $userLoginHistoryCount) {\n    _id\n    email\n    unionid\n    openid\n    emailVerified\n    phone\n    phoneVerified\n    username\n    nickname\n    company\n    photo\n    browser\n    device\n    password\n    registerInClient\n    registerMethod\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    country\n    updatedAt\n    group {\n      _id\n      name\n      descriptions\n      client\n      permissions\n      createdAt\n    }\n    clientType {\n      _id\n      name\n      description\n      image\n      example\n    }\n    userLocation {\n      _id\n      when\n      where\n    }\n    userLoginHistory {\n      totalCount\n    }\n    systemApplicationType {\n      _id\n      name\n      descriptions\n      price\n    }\n    thirdPartyIdentity {\n      provider\n      refreshToken\n      accessToken\n      expiresIn\n      updatedAt\n    }\n    customData\n    metadata\n    salt\n  }\n}\n    ";
exports.UserAnalyticsDocument = "\n    query userAnalytics($clientId: String) {\n  userAnalytics(clientId: $clientId) {\n    usersAddedToday {\n      length\n    }\n    usersAddedLastWeek {\n      length\n    }\n    usersLoginLastWeek {\n      length\n    }\n    totalUsers {\n      length\n    }\n    allUsers\n    totalApps\n  }\n}\n    ";
exports.UserClientListDocument = "\n    query userClientList($page: Int, $count: Int, $sortBy: String) {\n  userClientList(page: $page, count: $count, sortBy: $sortBy) {\n    list {\n      _id\n      name\n      createdAt\n      usersCount\n    }\n    totalCount\n  }\n}\n    ";
exports.UserClientTypesDocument = "\n    query userClientTypes {\n  userClientTypes {\n    _id\n    name\n    description\n    image\n    example\n  }\n}\n    ";
exports.UserClientsDocument = "\n    query userClients($userId: String!, $page: Int, $count: Int, $computeUsersCount: Boolean) {\n  userClients(userId: $userId, page: $page, count: $count, computeUsersCount: $computeUsersCount) {\n    list {\n      _id\n      iamType\n      domain\n      userLimit\n      usersCount\n      logo\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      showWXMPQRCode\n      useMiniLogin\n      useSelfWxapp\n      allowedOrigins\n      name\n      secret\n      token\n      descriptions\n      jwtExpired\n      createdAt\n      isDeleted\n      enableEmail\n    }\n    totalCount\n  }\n}\n    ";
exports.UserExistDocument = "\n    query userExist($userPoolId: String!, $email: String, $phone: String, $username: String) {\n  userExist(userPoolId: $userPoolId, email: $email, phone: $phone, username: $username)\n}\n    ";
exports.UserGroupDocument = "\n    query userGroup($group: String!, $client: String!, $page: Int, $count: Int) {\n  userGroup(group: $group, client: $client, page: $page, count: $count) {\n    list {\n      _id\n      createdAt\n    }\n    totalCount\n  }\n}\n    ";
exports.UserGroupListDocument = "\n    query userGroupList($_id: String!) {\n  userGroupList(_id: $_id) {\n    totalCount\n    list {\n      _id\n      userPoolId\n      name\n      description\n      createdAt\n      updatedAt\n    }\n    rawList\n  }\n}\n    ";
exports.UserMetadataDocument = "\n    query userMetadata($_id: String!) {\n  userMetadata(_id: $_id) {\n    totalCount\n    list {\n      key\n      value\n    }\n  }\n}\n    ";
exports.UserOAuthCountDocument = "\n    query userOAuthCount($userIds: [String]) {\n  userOAuthCount(userIds: $userIds)\n}\n    ";
exports.UserPatchDocument = "\n    query userPatch($ids: String) {\n  userPatch(ids: $ids) {\n    list {\n      _id\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      username\n      nickname\n      company\n      photo\n      browser\n      device\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      customData\n      metadata\n      salt\n    }\n    totalCount\n  }\n}\n    ";
exports.UserPermissionListDocument = "\n    query userPermissionList($_id: String!) {\n  userPermissionList(_id: $_id) {\n    totalCount\n    list {\n      _id\n      name\n      userPoolId\n      createdAt\n      updatedAt\n      description\n    }\n    rawList\n  }\n}\n    ";
exports.UserRoleListDocument = "\n    query userRoleList($_id: String!) {\n  userRoleList(_id: $_id) {\n    totalCount\n    list {\n      _id\n      userPoolId\n      name\n      description\n      createdAt\n      updatedAt\n    }\n    rawList\n  }\n}\n    ";
exports.UsersDocument = "\n    query users($registerInClient: String, $page: Int, $count: Int, $populate: Boolean) {\n  users(registerInClient: $registerInClient, page: $page, count: $count, populate: $populate) {\n    list {\n      _id\n      email\n      unionid\n      openid\n      emailVerified\n      phone\n      phoneVerified\n      username\n      nickname\n      company\n      photo\n      browser\n      device\n      password\n      registerInClient\n      registerMethod\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      country\n      updatedAt\n      customData\n      metadata\n      salt\n    }\n    totalCount\n  }\n}\n    ";
exports.UsersByOidcAppDocument = "\n    query usersByOidcApp($userPoolId: String, $page: Int, $count: Int, $appId: String) {\n  usersByOidcApp(userPoolId: $userPoolId, page: $page, count: $count, appId: $appId) {\n    list\n    totalCount\n  }\n}\n    ";
exports.UsersInGroupDocument = "\n    query usersInGroup($group: String, $page: Int, $count: Int) {\n  usersInGroup(group: $group, page: $page, count: $count) {\n    list {\n      email\n      username\n      _id\n      upgrade\n    }\n    totalCount\n  }\n}\n    ";
exports.ValidatePasswordDocument = "\n    query validatePassword($userPool: String!, $password: String!, $encryptedPassword: String!) {\n  validatePassword(userPool: $userPool, password: $password, encryptedPassword: $encryptedPassword) {\n    isValid\n  }\n}\n    ";
exports.WechatWorkCorpDocument = "\n    query wechatWorkCorp($userPoolId: String!, $corpId: String!) {\n  wechatWorkCorp(userPoolId: $userPoolId, corpId: $corpId) {\n    corpId\n    corpName\n    addressBookSyncHelperSecret\n    addressBookSyncHelperToken\n    addressBookSyncHelperEncodingAESKey\n    twoWaySynchronizationOn\n    createdAt\n    updatedAt\n    orgId\n  }\n}\n    ";
exports.WxQrCodeLogDocument = "\n    query wxQRCodeLog($page: Int, $count: Int, $clientId: String, $sortBy: String) {\n  wxQRCodeLog(page: $page, count: $count, clientId: $clientId, sortBy: $sortBy) {\n    list {\n      random\n      expiredAt\n      createdAt\n      success\n      qrcode\n      used\n      accessToken\n      openid\n      userInfo\n      redirect\n    }\n    totalCount\n  }\n}\n    ";
